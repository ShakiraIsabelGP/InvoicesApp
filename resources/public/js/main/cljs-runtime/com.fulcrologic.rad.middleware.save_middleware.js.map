{"version":3,"sources":["com/fulcrologic/rad/middleware/save_middleware.cljc"],"mappings":";AAMA,GAAA,QAAAA,gCAAAC,4CAAAC,gDAAAC,2DAAAC,2EAAAC;AAAA;AAAA,AAAA;;;;;;;;+DAAA,iBAAAC,6BAAA,AAAAC,6CAAA,1JAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,iDAAA,iBAOE,WAAKE,SAASC,MAAMC;AAApB,AAA2B,OAACC,gBAAMF;GAPpC,4DAAAP,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AASA,AAAAM,yGAAA,4DAAA,WAAmCK,EAAEA,MAAEC;AAAvC,AAA0CA;;AAE1C;;;gEAAA,hEAAMC,wIAEHC;AAFH,AAGE,oEAAA,mFAAA,uGAAA,8GAAA,WAAAC,hXAACC,kDAAUF;AAAX,AACG,OAACG,oBACC,mGAAyBC,EAAEV,MAAMW;AAAjC,AACE,IAAMC,kBAAgB,AAACd,2FAAcQ,WAAWN,MAAMW;AAAtD,AACE,GAAI,oBAAA,nBAAMC;AACR,OAACC,+CAAOH,EAAEV;;AACV,OAACc,8CAAMJ,EAAEV,MAAMY;;GALvB,mCAAAL;;;AAQL;;;;qEAAA,rEAAMQ,kJAGHC;AAHH,AAIE,kBAAKV;AAAL,AACE,IAAMW,eAAa,AAACZ,8DAAeC;AAAnC,AACE,QAACU,wCAAAA,sDAAAA,hBAAQC,kCAAAA;;;AAEf;;;;;;;;;;;;;;;;;oEAAA,pEAAMC,gJAgBHF,QAAQG;AAhBX,AAiBE,kBAAKC;AAAL,AACE,IAAMC,YAAU,mDAAA,mFAAA,uGAAA,7OAACC,+CAAOF;IAClBG,YAAU,iBAAAC,mBAAI,CAACL,2CAAAA,0DAAAA,jBAAWC,sCAAAA,lCAAIC,sCAAAA;AAApB,AAAA,oBAAAG;AAAAA;;AAA+BH;;;AAD/C,AAEE,IAAAI,WAAS,uBAAA,mFAAA,uGAAA,jNAACC,mBAASN,4SAAiCG;AAApD,AAAA,sFAAAE,8BAAAA,5GAACT,wCAAAA,kDAAAA","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.middleware","js/com.fulcrologic.rad.middleware.save-middleware","js/com.fulcrologic.rad.middleware.save-middleware.rewrite-value","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__90545","cljs.core/MultiFn","cljs.core.symbol","com.fulcrologic.rad.middleware.save-middleware/rewrite-value","save-env","ident","value","cljs.core/first","_","v","com.fulcrologic.rad.middleware.save-middleware/rewrite-values","pathom-env","p1__90546#","cljs.core.update_in","cljs.core/reduce-kv","m","new-value","rewritten-value","cljs.core.dissoc","cljs.core.assoc","com.fulcrologic.rad.middleware.save-middleware/wrap-rewrite-values","handler","new-save-env","com.fulcrologic.rad.middleware.save-middleware/wrap-rewrite-delta","rewrite-fn","env","old-delta","cljs.core.get_in","new-delta","or__5045__auto__","G__90547","cljs.core/assoc-in"],"sourcesContent":["(ns com.fulcrologic.rad.middleware.save-middleware\n  (:require\n    [com.fulcrologic.rad.form :as form]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]))\n\n(defmulti rewrite-value\n  \"\n  [save-env ident save-diff]\n\n  Given the save-env, ident of an entity, and incoming save diff (map from :before to :after for each\n  changed attribute): Return an updated save-diff.  The default method for this simply returns save-diff.\n  Returning nil from this method will have the effect of removing all values for `ident` from the save.\"\n  (fn [save-env ident value] (first ident)))\n\n(defmethod rewrite-value :default [_ _ v] v)\n\n(defn rewrite-values\n  \"Rewrite the delta in ::form/params of save-env. Returns the new save-env.\"\n  [pathom-env]\n  (update-in pathom-env [::form/params ::form/delta]\n    #(reduce-kv\n       (fn rewrite-value-step* [m ident new-value]\n         (let [rewritten-value (rewrite-value pathom-env ident new-value)]\n           (if (nil? rewritten-value)\n             (dissoc m ident)\n             (assoc m ident rewritten-value))))\n       {} %)))\n\n(defn wrap-rewrite-values\n  \"Middleware that allows the distribution of incoming save diff rewrite across models. Should be at the bottom\n   (early side) of the middleware if used.\"\n  [handler]\n  (fn [pathom-env]\n    (let [new-save-env (rewrite-values pathom-env)]\n      (handler new-save-env))))\n\n(defn wrap-rewrite-delta\n  \"Save middleware that adds a step in the middleware that can rewrite the incoming delta of a save.\n  The rewrite is allowed to do anything at all to the delta: add extra entities, create relations, augment\n  entities, or even clear the delta to an empty map so nothing will be saved.\n\n  The `rewrite-fn` should be a `(fn [pathom-env delta] updated-delta)`. You *can* return nil to indicate no\n  rewrite is needed, but any other return will be used as the new thing to save (instead of what was sent).\n\n  The `delta` has the format of a normalized Fulcro form save:\n\n  ```\n  {[:account/id 19] {:account/age {:before 42 :after 43}\n                     :account/items {:before [] :after [[:item/id 1]]}}\n   [:item/id 1] {:item/value {:before 22M :after 19.53M}}}\n  ```\n  \"\n  [handler rewrite-fn]\n  (fn [env]\n    (let [old-delta (get-in env [::form/params ::form/delta])\n          new-delta (or (rewrite-fn env old-delta) old-delta)]\n      (handler (assoc-in env [::form/params ::form/delta] new-delta)))))"]}