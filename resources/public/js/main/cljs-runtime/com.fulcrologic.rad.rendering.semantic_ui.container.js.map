{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/container.cljc"],"mappings":"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","names":["options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__92898","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.container","js/com.fulcrologic.rad.rendering.semantic-ui.container.StandardContainerControls","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.container/StandardContainerControls","_","instance","map__92899","controls","com.fulcrologic.rad.control.component_controls","input-layout","action-layout","com.fulcrologic.rad.control/standard-control-layout","com.fulcrologic.fulcro.dom.macro_create_element","or__5045__auto__","G__92900","com.fulcrologic.fulcro.components/component-options","com.fulcrologic.rad.options_util._QMARK__BANG_","cljs.core.keep","k","com.fulcrologic.rad.control.render_control","cljs.core.map_indexed","idx","row","G__92901","com.fulcrologic.rad.rendering.semantic-ui.form/n-fields-string","cljs.core/count","p1__92897#","cljs.core.map","temp__5802__auto__","c","ui-standard-container-controls","com.fulcrologic.fulcro.components.factory","com.fulcrologic.rad.rendering.semantic-ui.container/render-standard-controls","G__92902","com.fulcrologic.rad.rendering.semantic-ui.container/n-string","com.fulcrologic.rad.rendering.semantic-ui.container/render-container-layout","container-instance","map__92903","children","layout","container-props","render-cls","id","cls","factory","com.fulcrologic.fulcro.components.computed_factory","props","G__92904","G__92905","cols","entry","cljs.core/Keyword","width","and__5043__auto__","cljs.core/map?","p__92906","vec__92907","cljs.core.nth","com.fulcrologic.rad.container/id-child-pairs"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.container\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom :refer [div]]])\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.rad.container :as container]\n    [com.fulcrologic.rad.control :as control]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.rendering.semantic-ui.form :as sui-form]\n    [taoensso.timbre :as log]))\n\n(comp/defsc StandardContainerControls [_ {:keys [instance]}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [controls (control/component-controls instance)\n        {:keys [input-layout action-layout]} (control/standard-control-layout instance)]\n    (div :.ui.top.attached.compact.basic.segment\n      (dom/h3 :.ui.header\n        (or (some-> instance comp/component-options ::container/title (?! instance)) \"\")\n        (div :.ui.right.floated.buttons\n          (keep (fn [k] (control/render-control instance k (get controls k))) action-layout)))\n      (div :.ui.form\n        (map-indexed\n          (fn [idx row]\n            (div {:key idx :className (sui-form/n-fields-string (count row))}\n              (map #(if-let [c (get controls %)]\n                      (control/render-control instance % c)\n                      (dom/div :.ui.field {:key (str %)} \"\")) row)))\n          input-layout)))))\n\n(let [ui-standard-container-controls (comp/factory StandardContainerControls)]\n  (defn render-standard-controls [instance]\n    (ui-standard-container-controls {:instance instance})))\n\n(def n-string {0  \"zero\"\n               1  \"one\"\n               2  \"two\"\n               3  \"three\"\n               4  \"four\"\n               5  \"five\"\n               6  \"six\"\n               7  \"seven\"\n               8  \"eight\"\n               9  \"nine\"\n               10 \"ten\"\n               11 \"eleven\"\n               12 \"twelve\"\n               13 \"thirteen\"\n               14 \"fourteen\"\n               15 \"fifteen\"\n               16 \"sixteen\"})\n\n(defn render-container-layout [container-instance]\n  (let [{::container/keys [children layout]} (comp/component-options container-instance)]\n    ;; TODO: Custom controls rendering as a separate config?\n    (let [container-props (comp/props container-instance)\n          render-cls      (fn [id cls]\n                            (let [factory (comp/computed-factory cls)\n                                  props   (get container-props id {})]\n                              (factory props {::container/controlled? true})))]\n      (dom/div :.ui.basic.segments\n        (render-standard-controls container-instance)\n        (dom/div :.ui.basic.segment\n          (if layout\n            (dom/div :.ui.container.centered.grid\n              (map-indexed\n                (fn *render-row [idx row]\n                  (let [cols (count row)]\n                    (dom/div :.row {:key idx}\n                      (map\n                        (fn *render-col [entry]\n                          (let [id    (if (keyword? entry) entry (:id entry))\n                                width (or\n                                        (and (map? entry) (:width entry))\n                                        (int (/ 16 cols)))\n                                cls   (get children id)]\n                            (dom/div {:key id :classes [(when width (str (n-string width) \" wide\")) \"column\"]}\n                              (render-cls id cls))))\n                        row))))\n                layout))\n            (map\n              (fn [[id cls]]\n                (dom/div {:key id}\n                  (render-cls id cls)))\n              (container/id-child-pairs container-instance))))))))\n"]}