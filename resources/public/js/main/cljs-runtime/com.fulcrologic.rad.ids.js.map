{"version":3,"sources":["com/fulcrologic/rad/ids.cljc"],"mappings":"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","names":["com.fulcrologic.rad.ids/valid-uuid-string?","s","cljs.core/boolean","and__5043__auto__","cljs.core/re-matches","var_args","G__83948","com.fulcrologic.rad.ids/new-uuid","js/Error","com.yetanalytics.squuid/generate-squuid","v","cljs.core/uuid?","cljs.core/int?","sv","l","padding","clojure.string.join","cljs.core.repeat","cljs.core/uuid","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","map__83953","cljs.core/--destructure-map","argspec83949","cljs.core.get","retspec83950","com.fulcrologic.guardrails.core/run-check","f83952","cljs.core/Keyword","ret83951","com.fulcrologic.rad.ids/select-keys-in-ns","m","nspc","cljs.core/map?","cljs.core/string?","cljs.core/reduce-kv","new-map","k","cljs.core._EQ_","cljs.core/namespace","cljs.core.assoc","com.fulcrologic.rad.ids/id-string->id","type","id","G__83954","com.fulcrologic.rad.ids.new_uuid","com.fulcrologic.rad.type-support.integer/parse-int","com.fulcrologic.rad.type-support.integer/parse-long","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay"],"sourcesContent":["(ns com.fulcrologic.rad.ids\n  \"Functions supporting various ID concerns.\"\n  (:require\n    [com.yetanalytics.squuid :refer [generate-squuid]]\n    [clojure.string :as str]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [com.fulcrologic.rad.type-support.integer :as int]\n    [taoensso.timbre :as log])\n  #?(:clj\n     (:import (java.util UUID))))\n\n(defn valid-uuid-string?\n  \"Returns true if the given string appears to be a valid UUID string.\"\n  [s]\n  (boolean\n    (and\n      (string? s)\n      (re-matches #\"^........-....-....-....-............$\" s))))\n\n(defn new-uuid\n  \"Without args gives a semi-random SQUUID. With args, builds UUID based on input.\n\n  - If v is an int (in CLJC), it will generate a fixed UUID starting with FFF...and ending\n    in that number.\n  - If v is a uuid, it is just returned.\n  - If v is non-nil it will be used as a string to generate a UUID (can fail).\n  - If v is missing, you will get a random uuid.\"\n  ([] (generate-squuid))\n  #?(:clj ([v]\n           (cond\n             (uuid? v) v\n             (int? v)\n             (UUID/fromString\n               (format \"ffffffff-ffff-ffff-ffff-%012d\" v))\n             :else (UUID/fromString (str v)))))\n  #?(:cljs ([v]\n            (cond\n              (uuid? v) v\n              (int? v) (let [sv      (str v)\n                             l       (.-length sv)\n                             padding (str/join (repeat (- 12 l) \"0\"))]\n                         (uuid (str \"ffffffff-ffff-ffff-ffff-\" padding sv)))\n              :else (uuid (str v))))))\n\n(>defn select-keys-in-ns\n  \"Returns a version of `m` where only those keys with namespace `nspc` are kept.\"\n  [m nspc]\n  [map? string? => map?]\n  (reduce-kv\n    (fn [new-map k v]\n      (if (and (keyword? k) (= nspc (namespace k)))\n        (assoc new-map k v)\n        new-map))\n    {} m))\n\n(defn id-string->id\n  \"When forms are routed to their ID is in the URL as a string. This converts IDs in such a string format to the\n   given type (which must be a RAD type name that supports IDs like :uuid, :int, :long or :string).\"\n  [type id]\n  (case type\n    :uuid (new-uuid id)\n    :int (int/parse-int id)\n    :long (int/parse-long id)\n    :string id\n    (do\n      (log/error \"Unsupported ID type\" type)\n      id)))\n\n"]}