{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/components.cljc"],"mappings":"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","names":["p__92912","map__92913","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.rad.rendering.semantic-ui.components/sui-format->user-format","multiple","value","cljs.core.into","cljs.core.map","v","com.fulcrologic.fulcro.algorithms.transit.transit_str__GT_clj","p__92914","map__92915","com.fulcrologic.rad.rendering.semantic-ui.components/user-format->sui-format","cljs.core/to-array","com.fulcrologic.fulcro.algorithms.transit.transit_clj__GT_str","or__5045__auto__","cljs.core/boolean?","com.fulcrologic.rad.rendering.semantic-ui.components/wrapped-onChange","props","userOnChange","_","e92916","and__5043__auto__","cljs.core/seq","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__92919","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.components","js/com.fulcrologic.rad.rendering.semantic-ui.components.WrappedDropdown","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.components/WrappedDropdown","this","onChange","xform-options","cljs.core/memoize","options","cljs.core/clj->js","cljs.core.mapv","option","cljs.core.update","xform-value","multiple?","map__92920","get-options","format-value","com.fulcrologic.fulcro.components.get_state","cljs.core.merge","cljs.core/boolean","SearchInput","js-props","com.fulcrologic.fulcro.dom.create_element","e92921","string-value","p1__92917#","cljs.core/not","p1__92918#","cljs.core._EQ_","com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown/ui-dropdown","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.components\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n         [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :refer [ui-dropdown]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom]])\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.algorithms.transit :as ftransit]\n    [taoensso.timbre :as log]))\n\n(defn sui-format->user-format\n  \"Converts transit encoded value(s), used by Semantic UI, into CLJS datastructure.\"\n  [{:keys [multiple]} value]\n  (if multiple\n    (into [] (map (fn [v] (ftransit/transit-str->clj v {:metadata? false})) value))\n    (ftransit/transit-str->clj value {:metadata? false})))\n\n(defn user-format->sui-format [{:keys [multiple]} value]\n  \"Converts CLJS datastructure into transit encoded string(s), usable by Semantic UI.\"\n  (if multiple\n    (if value\n      (to-array (map (fn [v] (ftransit/transit-clj->str v {:metadata? false})) value))\n      #js [])\n    (if (or value (boolean? value))\n      (ftransit/transit-clj->str value {:metadata? false})\n      \"\")))\n\n(defn wrapped-onChange\n  \"Wraps userOnChange fn with try/catch and sui-form->user-format conversion.\"\n  [props userOnChange]\n  (fn [_ v]\n    #?(:cljs\n       (try\n         (if (and (.-value v) (seq (.-value v)))\n           (let [value (sui-format->user-format props (.-value v))]\n             (when (and value userOnChange) (userOnChange value)))\n           (userOnChange nil))\n         (catch :default e\n           (log/error e \"Unable to read dropdown value \" (when v (.-value v))))))))\n\n(defsc WrappedDropdown [this {:keys [onChange value multiple] :as props}]\n  {:initLocalState (fn [this]\n                     #?(:cljs\n                        (let [xform-options (memoize\n                                              (fn [options]\n                                                (clj->js (mapv (fn [option]\n                                                                 (update option :value (fn [v] (ftransit/transit-clj->str v {:metadata? false}))))\n                                                           options))))\n                              xform-value   (fn [multiple? value]\n                                              (user-format->sui-format {:multiple multiple?} value))]\n                          {:get-options  (fn [props] (xform-options (:options props)))\n                           :format-value (fn [props value] (xform-value (:multiple props) value))})))}\n  #?(:cljs\n     (let [{:keys [get-options format-value]} (comp/get-state this)\n           userOnChange onChange\n           options      (get-options props)\n           value        (format-value props value)\n           props        (merge\n                          {:search             true\n                           :selection          true\n                           :closeOnBlur        true\n                           :openOnFocus        true\n                           :selectOnBlur       true\n                           :selectOnNavigation true\n                           :multiple           (boolean multiple)}\n                          props\n                          {:value       value\n                           :searchInput #js {:children (fn [SearchInput ^js js-props]\n                                                         ;; HACK for Chrome\n                                                         (set! (.-autoComplete js-props) \"no-autocomplete\")\n                                                         (dom/create-element SearchInput js-props))}\n                           :options     options\n                           :onChange    (fn [e v]\n                                          (try\n                                            (let [string-value (.-value v)\n                                                  value        (if multiple\n                                                                 (mapv #(when (seq %) (ftransit/transit-str->clj % {:metadata? false})) string-value)\n                                                                 (when (seq string-value) (ftransit/transit-str->clj string-value {:metadata? false})))]\n                                              (when userOnChange\n                                                (userOnChange value)))\n                                            (catch :default e\n                                              ;; Note: With allowAdditions enabled the value will be the raw user-typed string, not transit-encoded\n                                              ;; clj value. We can this safely ignore its error here and assume the user handles it in :onAddItem\n                                              (when-not (and (.-allowAdditions v) (not (.find (.-options v) #(= (.-value %) (.-value v)))))\n                                                (log/debug \"Unable to read dropdown value \" e (when v (.-value v)))))))})]\n       (ui-dropdown props))\n     :clj\n     (dom/div :.ui.selection.dropdown\n       (dom/input {:type \"hidden\"})\n       (dom/i :.dropdown.icon)\n       (dom/div :.default.text \"\")\n       (dom/div :.menu))))\n\n(def ui-wrapped-dropdown\n  \"Draw a SUI dropdown with the given props.  The arguments are identical to sui/ui-dropdown, but options and onChange\n  are auto-wrapped so that clojure data (e.g. keywords) can be used for the option :value fields. It also defaults\n  a number of things (:search, :closeOnBlue, openOnFocus, selectOnBlue, and :selectOnNavigation) to true, but you can\"\n  (comp/factory WrappedDropdown))\n\n"]}