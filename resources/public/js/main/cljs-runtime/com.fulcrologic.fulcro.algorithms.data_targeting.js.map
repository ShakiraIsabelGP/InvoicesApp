{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/vector?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep-impl","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.algorithms.data-targeting/multiple-targets","map__49081","cljs.core/--destructure-map","retspec49077","cljs.core.get","argspec49076","com.fulcrologic.guardrails.core/run-check","f49079","ret49078","cljs.core/map?","cljs.core.apply","cljs.core/concat","cljs.core/last","cljs.core/seq","seq49080","self__5755__auto__","targets","cljs.core/with-meta","cljs.core/vec","map__49090","retspec49087","argspec49086","f49089","ret49088","com.fulcrologic.fulcro.algorithms.data-targeting/prepend-to","target","map__49096","argspec49091","retspec49092","f49094","ret49093","com.fulcrologic.fulcro.algorithms.data-targeting/append-to","map__49107","argspec49100","retspec49101","f49103","ret49102","com.fulcrologic.fulcro.algorithms.data-targeting/replace-at","map__49112","retspec49109","argspec49108","f49111","ret49110","com.fulcrologic.fulcro.algorithms.data-targeting/replacement-target?","t","cljs.core/any?","cljs.core/boolean?","cljs.core/meta","cljs.core/boolean","map__49117","retspec49114","argspec49113","f49116","ret49115","com.fulcrologic.fulcro.algorithms.data-targeting/prepend-target?","map__49122","argspec49118","retspec49119","f49121","ret49120","com.fulcrologic.fulcro.algorithms.data-targeting/append-target?","map__49137","argspec49131","retspec49132","f49134","ret49133","com.fulcrologic.fulcro.algorithms.data-targeting/multiple-targets?","map__49150","argspec49140","retspec49141","f49143","ret49142","com.fulcrologic.fulcro.algorithms.data-targeting/special-target?","clojure.set.intersection","cljs.core/keys","cljs.core/set","cljs.spec.alpha/or-spec-impl","com.fulcrologic.fulcro.algorithms.data-targeting/integrate-ident*","map__49162","retspec49154","argspec49153","f49156","p__49164","vec__49165","cljs.core.nth","p1__49151#","G__49168","cljs.core/Keyword","p1__49152#","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ret49155","seq49159","G__49160","cljs.core/first","cljs.core/next","G__49161","self__5754__auto__","state","ident","named-parameters","actions","cljs.core.partition","cljs.core.reduce","command","data-path","already-has-ident-at-path?","cljs.core/some","cljs.core._EQ_","cljs.core.get_in","cljs.core.update_in","cljs.core.into","cljs.core.fnil","cljs.core/conj","path-to-vector","cljs.core/butlast","to-many?","index","vector","cljs.core/contains?","cljs.core/assoc-in","G__49188","com.fulcrologic.fulcro.algorithms.data-targeting/process-target","js/Error","map__49190","retspec49180","argspec49179","f49182","ret49181","map__49198","argspec49183","retspec49184","f49186","G__49214","G__49215","and__5043__auto__","ret49185","state-map","source-path","cljs.core/keyword?","edn-query-language.core/ident?","com.fulcrologic.fulcro.algorithms.data_targeting.process_target","remove-source?","item-to-place","many-idents?","cljs.core/every?","s","process-target-impl","target-has-many?","v","cljs.core.concat","com.fulcrologic.fulcro.algorithms.data_targeting.integrate_ident_STAR_","cljs.core.dissoc","taoensso.encore.dissoc_in"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.data-targeting\n  \"The implementation of processing load/mutation result graph targeting.\"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :as gw :refer [>defn => >def]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(>def ::target vector?)\n\n(>defn multiple-targets\n  \"Specifies a target that should place edges in the graph at multiple locations.\n\n  `targets` - Any number of targets.  A target can be a simple path (as a vector), or other\n  special targets like `append-to` and `prepend-to`.\"\n  [& targets]\n  [(s/* ::target) => ::target]\n  (with-meta (vec targets) {::multiple-targets true}))\n\n(>defn prepend-to\n  \"Specifies a to-many target that will preprend an edge to some to-many edge. NOTE: this kind of target will not\n  create duplicates in the target list.\n\n  `target` - A vector (path) in the normalized database of the to-many list of idents.\n  \"\n  [target]\n  [::target => ::target]\n  (with-meta target {::prepend-target true}))\n\n(>defn append-to\n  \"Specifies a to-many target that will append an edge to some to-many edge. NOTE: this kind of target will not\n  create duplicates in the target list.\n\n  `target` - A vector (path) in the normalized database of the to-many list of idents.\"\n  [target]\n  [::target => ::target]\n  (with-meta target {::append-target true}))\n\n(>defn replace-at\n  \"Specifies a target that will replace an edge at some normalized location.\n\n  `target` - A vector (path) in the normalized database. This path can include numbers to target some element\n  of an existing to-many list of idents.\"\n  [target]\n  [::target => ::target]\n  (with-meta target {::replace-target true}))\n\n(>defn replacement-target? [t] [any? => boolean?] (-> t meta ::replace-target boolean))\n(>defn prepend-target? [t] [any? => boolean?] (-> t meta ::prepend-target boolean))\n(>defn append-target? [t] [any? => boolean?] (-> t meta ::append-target boolean))\n(>defn multiple-targets? [t] [any? => boolean?] (-> t meta ::multiple-targets boolean))\n\n(>defn special-target?\n  \"Is the given target special? This means it is not just a plain vector path, but is instead something like\n  an append.\"\n  [target]\n  [any? => boolean?]\n  (boolean (seq (set/intersection (-> target meta keys set) #{::replace-target ::append-target ::prepend-target ::multiple-targets}))))\n\n(>defn integrate-ident*\n  \"Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not place\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific location in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element index then that element must already exist in the vector.\n\n  NOTE: `ident` does not have to be an ident if you want to place denormalized data.  It can really be anything.\n\n  Returns the updated state map.\"\n  [state ident & named-parameters]\n  [map? any? (s/* (s/or :path ::target :command #{:append :prepend :replace})) => map?]\n  (let [actions (partition 2 named-parameters)]\n    (reduce (fn [state [command data-path]]\n              (let [already-has-ident-at-path? (fn [data-path] (some #(= % ident) (get-in state data-path)))]\n                (case command\n                  :prepend (if (already-has-ident-at-path? data-path)\n                             state\n                             (update-in state data-path #(into [ident] %)))\n                  :append (if (already-has-ident-at-path? data-path)\n                            state\n                            (update-in state data-path (fnil conj []) ident))\n                  :replace (let [path-to-vector (butlast data-path)\n                                 to-many?       (and (seq path-to-vector) (vector? (get-in state path-to-vector)))\n                                 index          (last data-path)\n                                 vector         (get-in state path-to-vector)]\n                             (when-not (vector? data-path) (log/error \"Replacement path must be a vector. You passed: \" data-path \"See https://book.fulcrologic.com/#err-targ-repl-path-not-vec\"))\n                             (when to-many?\n                               (cond\n                                 (not (vector? vector)) (log/error \"Path for replacement must be a vector. See https://book.fulcrologic.com/#err-targ-multi-repl-must-be-vec\")\n                                 (not (number? index)) (log/error \"Path for replacement must end in a vector index. See https://book.fulcrologic.com/#err-targ-multi-repl-must-end-with-idx\")\n                                 (not (contains? vector index)) (log/error \"Target vector for replacement does not have an item at index \" index \". See https://book.fulcrologic.com/#err-targ-multi-repl-no-such-idx\")))\n                             (assoc-in state data-path ident))\n                  state)))\n      state actions)))\n\n(>defn process-target\n  \"Process a load target (which can be a multiple-target).\n\n  `state-map` - the state-map\n  `source-path` - A keyword, ident, or app-state path.  If the source path is an ident, then that is what is placed\n     in app state.  If it is a keyword or longer path then the thing at that location in app state is pulled from app state\n     and copied to the target location(s).\n  `target` - The target(s)\n  `remove-source?` - When true the source will be removed from app state once it has been written to the new location.\n\n  Returns an updated state-map with the given changes.\"\n  ([state-map source-path target]\n   [map? (s/or :key keyword? :ident eql/ident? :path vector?) ::target => map?]\n   (process-target state-map source-path target true))\n  ([state-map source-path target remove-source?]\n   [map? (s/or :key keyword? :ident eql/ident? :path vector?) ::target boolean? => map?]\n   (letfn [(process-target-impl [state-map source-path target]\n             (let [item-to-place (cond (eql/ident? source-path) source-path\n                                       (keyword? source-path) (get state-map source-path)\n                                       :else (get-in state-map source-path))\n                   many-idents?  (and (vector? item-to-place)\n                                   (every? eql/ident? item-to-place))]\n               (cond\n                 (and (eql/ident? source-path) (not (special-target? target)))\n                 (assoc-in state-map target item-to-place)\n\n                 (not (special-target? target))\n                 (assoc-in state-map target item-to-place)\n\n                 (multiple-targets? target)\n                 (reduce (fn [s t] (process-target-impl s source-path t)) state-map target)\n\n                 (and many-idents? (special-target? target))\n                 (let [state            state-map\n                       target-has-many? (vector? (get-in state target))]\n                   (if target-has-many?\n                     (cond\n                       (prepend-target? target) (update-in state target (fn [v] (vec (concat item-to-place v))))\n                       (append-target? target) (update-in state target (fn [v] (vec (concat v item-to-place))))\n                       (replacement-target? target) (assoc-in state target item-to-place)\n                       :else state)\n                     (assoc-in state target item-to-place)))\n\n                 (special-target? target)\n                 (cond-> state-map\n                   (prepend-target? target) (integrate-ident* item-to-place :prepend target)\n                   (append-target? target) (integrate-ident* item-to-place :append target)\n                   (replacement-target? target) (integrate-ident* item-to-place :replace target))\n\n                 :else (do\n                         (log/warn \"Target processing found an unsupported case. See https://book.fulcrologic.com/#warn-target-unsuported-case\")\n                         state-map))))]\n     (cond-> (process-target-impl state-map source-path target)\n       (and remove-source?\n            (keyword? source-path))\n       (dissoc source-path)\n       (and remove-source?\n           (not (eql/ident? source-path))\n           (vector? source-path))\n       (enc/dissoc-in source-path)))))\n"]}