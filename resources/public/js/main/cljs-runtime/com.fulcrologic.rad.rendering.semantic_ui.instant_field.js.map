{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/instant_field.cljc"],"mappings":";AAWA,AAAKA,4EACH,AAACC,wEAAa,sDAAA,qLAAA,2CAAA,tRAACC,8VACiB,WAAKC;AAAL,AACE,oBAAIA;AACF,OAACC,uGAAoCD;;AADvC;;GAFpB,uEAKkB,WAAKE;AAAL,AAAQ,IAAAC,WAAQD;AAAR,AAAA,GAAA,CAAAC,YAAA;AAAA;;AAAU,8GAAAA,vGAACC;;;AAErD,AAAKC,6EACH,AAACP,wEAAa,sDAAA,qLAAA,2CAAA,tRAACC,8VACiB,WAAKC;AAAL,AACE,oBAAIA;AACF,yIAAA,OAAA,zIAACM,uBAAY,AAACL,uGAAoCD;;AADpD;;GAFpB,uEAKkB,WAAKE;AAAL,AAAQ,IAAAK,WAAQL;IAARK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAU,6CAAAA,UAAA;AAAV,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAyB,8GAAAA,vGAACH;;;AAEpE;;;AAAKI,uEAEH,mGAAA,2CAAA,qDAAA,nMAACC,4NAA8CZ;AACjD;;;AAAKa,oFAEH,mGAAA,2CAAA,qDAAA,nMAACD,kNAAoCJ","names":["com.fulcrologic.rad.rendering.semantic-ui.instant-field/ui-datetime-input","com.fulcrologic.fulcro.components.factory","com.fulcrologic.fulcro.dom.inputs/StringBufferedInput","tm","com.fulcrologic.rad.type_support.date_time.inst__GT_html_datetime_string","s","G__93230","com.fulcrologic.rad.type_support.date_time.html_datetime_string__GT_inst","com.fulcrologic.rad.rendering.semantic-ui.instant-field/ui-date-noon-input","clojure.string/replace","G__93231","com.fulcrologic.rad.rendering.semantic-ui.instant-field/render-field","com.fulcrologic.rad.rendering.semantic_ui.field.render_field_factory","com.fulcrologic.rad.rendering.semantic-ui.instant-field/render-date-at-noon-field"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.instant-field\n  (:require\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.components :as comp]\n    #?(:cljs [com.fulcrologic.fulcro.dom :refer [div label input]]\n       :clj  [com.fulcrologic.fulcro.dom-server :refer [div label input]])\n    [com.fulcrologic.fulcro.dom.inputs :as inputs]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.rad.type-support.date-time :as datetime]\n    [com.fulcrologic.rad.rendering.semantic-ui.field :refer [render-field-factory]]))\n\n(def ui-datetime-input\n  (comp/factory (inputs/StringBufferedInput ::DateTimeInput\n                  {:model->string (fn [tm]\n                                    (if tm\n                                      (datetime/inst->html-datetime-string tm)\n                                      \"\"))\n                   :string->model (fn [s] (some-> s (datetime/html-datetime-string->inst)))})))\n\n(def ui-date-noon-input\n  (comp/factory (inputs/StringBufferedInput ::DateTimeInput\n                  {:model->string (fn [tm]\n                                    (if tm\n                                      (str/replace (datetime/inst->html-datetime-string tm) #\"T.*$\" \"\")\n                                      \"\"))\n                   :string->model (fn [s] (some-> s (str \"T12:00\") (datetime/html-datetime-string->inst)))})))\n\n(def render-field\n  \"Uses current timezone and gathers date/time.\"\n  (render-field-factory {:type \"datetime-local\"} ui-datetime-input))\n(def render-date-at-noon-field\n  \"Uses current timezone and gathers a local date but saves it as an instant at noon on that date.\"\n  (render-field-factory {:type \"date\"} ui-date-noon-input))\n\n"]}