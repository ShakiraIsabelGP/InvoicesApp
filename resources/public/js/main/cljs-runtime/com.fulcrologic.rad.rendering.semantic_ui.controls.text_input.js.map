{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/controls/text_input.cljc"],"mappings":"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","names":["com.fulcrologic.rad.rendering.semantic-ui.controls.text-input/internal-store-name","control-key","cljs.core.keyword","cljs.core/namespace","cljs.core/name","options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__93198","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.controls","js/com.fulcrologic.rad.rendering.semantic-ui.controls.text-input","js/com.fulcrologic.rad.rendering.semantic-ui.controls.text-input.TextControl","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.controls.text-input/TextControl","this","instance","_","map__93199","controls","com.fulcrologic.rad.control.component_controls","props","label","onChange","icon","placeholder","disabled?","visible?","user-props","control","map__93200","p1__93197#","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.options-util/?!","or__5045__auto__","value","com.fulcrologic.rad.control/current-value","last-sent-value","chg!","com.fulcrologic.rad.control/set-parameter!","com.fulcrologic.fulcro.dom.events/target-value","run!","run-if-unchanged?","evt","v","actually-changed?","cljs.core.not_EQ_","and__5043__auto__","inp","com.fulcrologic.fulcro.dom.macro_create_element","cljs.core.merge","cljs.core/boolean","cljs.core.partial","com.fulcrologic.fulcro.dom.events/enter?","com.fulcrologic.rad.rendering.semantic-ui.controls.text-input/render-control","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.controls.text-input\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    [com.fulcrologic.rad.control :as control]\n    [com.fulcrologic.rad.options-util :refer [?! debounce]]\n    [taoensso.timbre :as log]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])))\n\n(defn- internal-store-name [control-key]\n  (keyword (str 'com.fulcrologic.rad.rendering.semantic-ui.controls.text-input_ (namespace control-key))\n    (name control-key)))\n\n(defsc TextControl [this {:keys [instance control-key]}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [controls (control/component-controls instance)\n        props    (comp/props instance)\n        {:keys [label onChange icon placeholder disabled? visible? user-props] :as control} (get controls control-key)]\n    (when control\n      (let [label       (?! label instance)\n            disabled?   (?! disabled? instance)\n            placeholder (?! placeholder)\n            visible?    (or (nil? visible?) (?! visible? instance))\n            value       (control/current-value instance control-key)\n            {:keys [last-sent-value]} (control/current-value instance (internal-store-name control-key))\n            chg!        #(control/set-parameter! instance control-key (evt/target-value %))\n            run!        (fn [run-if-unchanged? evt] (let [v                 (evt/target-value evt)\n                                                          actually-changed? (not= v last-sent-value)]\n                                                      (when (and onChange (or run-if-unchanged? actually-changed?))\n                                                        (control/set-parameter! instance control-key v)\n                                                        (control/set-parameter! instance\n                                                          (internal-store-name control-key)\n                                                          {:last-sent-value v})\n                                                        ;; Change the URL parameter\n                                                        (onChange instance v))))]\n        (when visible?\n          (let [inp (dom/input (merge user-props\n                                 {:readOnly    (boolean disabled?)\n                                  :placeholder (str placeholder)\n                                  :onChange    chg!\n                                  :onBlur      (partial run! false)\n                                  :onKeyDown   (fn [evt] (when (evt/enter? evt) (run! true evt)))\n                                  :value       (str value)}))]\n            (dom/div :.ui.field {:key (str control-key)}\n              (dom/label label)\n              (if icon\n                (dom/div :.ui.icon.input\n                  (dom/i {:className (str icon \" icon\")})\n                  inp)\n                inp))))))))\n\n(def render-control (comp/factory TextControl {:keyfn :control-key}))\n"]}