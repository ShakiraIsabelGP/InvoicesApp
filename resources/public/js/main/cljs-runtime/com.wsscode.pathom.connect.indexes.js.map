{"version":3,"sources":["com/wsscode/pathom/connect/indexes.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/symbol?","cljs.spec.alpha.every_impl","G__63553","cljs.core/set?","cljs.spec.alpha.tuple_impl","i__20422__auto__","v__20423__auto__","cljs.core.nth","cljs.core/map?","G__63554","com.wsscode.pathom.connect.indexes/resolver-data","env-or-indexes","sym","idx","G__63555","cljs.core/contains?","cljs.core.get_in","p__63556","map__63557","cljs.core/--destructure-map","cljs.core.get","com.wsscode.pathom.connect.indexes/resolver-provides","provides","output","or__5045__auto__","com.wsscode.pathom.connect.indexes/normalize-io","com.wsscode.pathom.connect.indexes/merge-io-attrs","a","b","cljs.core.merge_with","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","map__63562","argspec63558","retspec63559","com.fulcrologic.guardrails.core/run-check","f63561","p__63563","vec__63564","vec__63567","ret63560","unions","cljs.core.into","cljs.core.map","k","v","merged","cljs.core.reduce","cljs.core/vals","cljs.core.assoc","x","cljs.core/first","var_args","G__63571","com.wsscode.pathom.connect.indexes/merge-io","js/Error","com.wsscode.pathom.connect.indexes/io->query","io","p__63572","vec__63573","cljs.core/seq","com.wsscode.pathom.connect.indexes/merge-oir","p1__63576#","p2__63577#","cljs.core/into","map__63582","retspec63579","argspec63578","f63581","G__63583","G__63584","ret63580","com.wsscode.pathom.connect.indexes/sub-select-io","io-map","mask","cljs.core/reduce-kv","m","p__63589","map__63590","map__63591","retspec63586","argspec63585","f63588","p__63592","map__63593","p__63594","map__63595","temp__5802__auto__","ret63587","com.wsscode.pathom.connect.indexes/sub-select-ast","children","ast","key","node","sub","cljs.core.update","cljs.core/conj","cljs.core.dissoc"],"sourcesContent":["(ns com.wsscode.pathom.connect.indexes\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [>def >defn >fdef => | <- ?]]\n    [com.wsscode.pathom.core :as p]))\n\n(>def :com.wsscode.pathom.connect/sym symbol?)\n(>def :com.wsscode.pathom.connect/attribute ::p/attribute)\n(>def :com.wsscode.pathom.connect/attributes-set (s/coll-of ::p/attribute :kind set?))\n(>def :com.wsscode.pathom.connect/io-map (s/map-of :com.wsscode.pathom.connect/attribute :com.wsscode.pathom.connect/io-map))\n\n(declare normalize-io)\n\n(defn resolver-data\n  \"Get resolver map information in env from the resolver sym.\"\n  [env-or-indexes sym]\n  (let [idx (cond-> env-or-indexes\n              (contains? env-or-indexes :com.wsscode.pathom.connect/indexes)\n              :com.wsscode.pathom.connect/indexes)]\n    (get-in idx [:com.wsscode.pathom.connect/index-resolvers sym])))\n\n(defn resolver-provides\n  [{:com.wsscode.pathom.connect/keys [provides output]}]\n  (or provides\n      (if output (normalize-io output))))\n\n; region io map\n\n(defn merge-io-attrs [a b]\n  (cond\n    (and (map? a) (map? b))\n    (merge-with merge-io-attrs a b)\n\n    (map? a) a\n    (map? b) b\n\n    :else b))\n\n(>defn normalize-io\n  \"Convert pathom output format into io/provides format.\"\n  [output]\n  [:com.wsscode.pathom.connect/output\n   => :com.wsscode.pathom.connect/io-map]\n  (if (map? output) ; union\n    (let [unions (into {} (map (fn [[k v]]\n                                 [k (normalize-io v)]))\n                       output)\n          merged (reduce merge-io-attrs (vals unions))]\n      (assoc merged :com.wsscode.pathom.connect/unions unions))\n    (into {} (map (fn [x] (if (map? x)\n                            (let [[k v] (first x)]\n                              [k (normalize-io v)])\n                            [x {}])))\n          output)))\n\n(defn merge-io\n  \"Merge ::p/shape-descriptor maps.\"\n  ([] {})\n  ([a] a)\n  ([a b]\n   (merge-with merge-io-attrs a b)))\n\n(defn io->query\n  \"Converts IO format to query format.\"\n  [io]\n  (into []\n        (map (fn [[k v]]\n               (if (seq v)\n                 {k (io->query v)}\n                 k)))\n        io))\n\n(defn merge-oir\n  \"Merge ::index-oir maps.\"\n  [a b]\n  (merge-with #(merge-with into % %2) a b))\n\n(>defn sub-select-io\n  \"Given io-map, filters the parts of it that are also contained in mask.\"\n  [io-map mask]\n  [:com.wsscode.pathom.connect/io-map :com.wsscode.pathom.connect/io-map\n   => :com.wsscode.pathom.connect/io-map]\n  (reduce-kv\n    (fn [m k v]\n      (if (contains? io-map k)\n        (assoc m k (if (seq v) (sub-select-io (get io-map k) v) v))\n        m))\n    {}\n    mask))\n\n(>defn sub-select-ast\n  \"Given an ast and a io-map mask, returns the parts of AST that match the mask.\"\n  [{:keys [children] :as ast} mask]\n  [:edn-query-language.ast/node :com.wsscode.pathom.connect/io-map\n   => :edn-query-language.ast/node]\n  (if (seq children)\n    (reduce\n      (fn [ast {:keys [key] :as node}]\n        (if-let [sub (get mask key)]\n          (update ast :children conj\n            (if (:children node)\n              (if (seq sub)\n                (sub-select-ast node sub)\n                (-> node (assoc :type :prop) (dissoc :children)))\n              node))\n          ast))\n      (assoc ast :children [])\n      children)\n    ast))\n\n; endregion\n\n"]}