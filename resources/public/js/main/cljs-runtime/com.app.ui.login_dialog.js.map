{"version":3,"sources":["com/app/ui/login_dialog.cljc"],"mappings":";AAYA,AAAA,AAAA;AAAA,IAAAA,+BAAA,2CAAA,wDAAA,8CAAkBoB;AAAlB,AAAA,0FAAA,gEAAA;GAAA,wEAAA,4DAAAnB;AAAA,AAAA,OAAAC,iDAAA,2CAAA,gEAAA,sBAAA,+DAAA,mBAAA,mCAAAD;GAAA,8HAAA,wDAAA,yIAAA,AAAA,oHAAA,0HAAA,AAAA,qGAAA,oDAAA,oDAAAE,NAAkBiB;AAAlB,AAAA,IAAAhB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAyDmB;eAAzD,AAAAjB,4CAAAF,eAAA,tEAAkCiB;eAAlC,AAAAf,4CAAAF,eAAA,tEAA2CkB;AAA3C,AAAA,0FAAA,iEAAA;GAAA,0DAAA,mDAAkBF;AAAlB,AAAA,OAAAb,uDAAA,NAAkBa;AAAlB,AAAA,IAAAZ,aAAA,CAAAC,wEAAAA,+EAAAA,TAAkBW,2DAAAA;IAAlBZ,iBAAA,AAAAH,4BAAAG;YAAAA,RAAyDe;eAAzD,AAAAjB,4CAAAE,eAAA,tEAAkCa;eAAlC,AAAAf,4CAAAE,eAAA,tEAA2Cc;IAA3CZ,aAAA,CAAAC,+EAAAA,sFAAAA,TAAkBS,kEAAAA;IAAlBV,iBAAA,AAAAL,4BAAAK;qBAAA,AAAAJ,4CAAAI,eAAA,5EAAwEc;AAAxE,AAUK,mEAAA,2CAAA,yFAAA,yDAAA,zPAACC,6JAAgB,AAACC,mBAAQF,sFAChB,0EAAA,mCAAA,7GAACG,8HACD,4EAAA,5EAACC,+GACiB,AAAAC,8EAAA,MAAA,mFACK,AAAAA,8EAAA,MAAA,mFACK,AAAAC,sDAAA,CAAA,QAAA,KAAA,aACA,AAAAD,8EAAA,QAAA,mFAAA,2CAAA,qDAAA,QAAA,6DACkB,WAAKE;AAAL,AAAU,oGAAA,kHAAA,/MAACC,uFAAcZ,8KAAyBW;GADpE,sDAEkB,iBAAAE,mBAAIZ;AAAJ,AAAA,oBAAAY;AAAAA;;AAAA;;mCAJvB,dAEK,6EAGL,AAAAJ,8EAAA,MAAA,mFACK,AAAAC,sDAAA,CAAA,QAAA,KAAA,aACA,AAAAD,8EAAA,QAAA,mFAAA,2CAAA,qDAAA,WAAA,6DACkB,WAAKE;AAAL,AAAU,oGAAA,iHAAA,9MAACC,uFAAcZ,6KAAyBW;GADpE,sDAEkB,iBAAAE,mBAAIX;AAAJ,AAAA,oBAAAW;AAAAA;;AAAA;;mCAJvB,dAEK,6EAGL,AAAAJ,8EAAA,MAAA,mFAAA,2CAAA,4DACe;AAAA,AAAO,4FAAA,rFAACK,+EAAed,yFAAM,iBAAAe,WAAA,2CAAA,sEAAA,TAA0Bd,qEAAmBC;AAA7C,AAAA,8HAAAa,kDAAAA,xKAACC,4DAAAA,sEAAAA;;oHAZlD,zGAWK,gBAAA;;;AAxBtC,AAAA,GAAA,QAAAxB,gCAAAC,oCAAAC,uCAAAC,oDAAAC;AAAA;AAAA,AAAA;;;oCAAA,AAAAC,oDAAA,AAAAX,4CAAAN,6BAAA,jKAAOmB;;;AAAP,AAAAD,8FAAA,4GAAAlB,9IAAOmB","names":["options__35388__auto__","params","com.fulcrologic.fulcro.components/make-state-map","p__63112","map__63113","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.components/wrapped-render","map__63114","com.fulcrologic.fulcro.components/props","map__63115","com.fulcrologic.fulcro.components/get-computed","js/com","js/com.app","js/com.app.ui","js/com.app.ui.login-dialog","js/com.app.ui.login-dialog.LoginForm","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.app.ui.login-dialog/LoginForm","this","username","password","props","visible?","com.fulcrologic.semantic-ui.modules.modal.ui-modal/ui-modal","cljs.core/boolean","com.fulcrologic.semantic-ui.modules.modal.ui-modal-header/ui-modal-header","com.fulcrologic.semantic-ui.modules.modal.ui-modal-content/ui-modal-content","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.fulcro.dom/macro-create-element*","evt","com.fulcrologic.fulcro.mutations.set_string_BANG_","or__5045__auto__","com.fulcrologic.fulcro.components.transact_BANG_","G__63120","com.app.model.account/login"],"sourcesContent":["(ns com.app.ui.login-dialog\n  (:require\n    [com.app.model.account :as account]\n    #?@(:cljs [[com.fulcrologic.semantic-ui.modules.modal.ui-modal :refer [ui-modal]]\n               [com.fulcrologic.semantic-ui.modules.modal.ui-modal-header :refer [ui-modal-header]]\n               [com.fulcrologic.semantic-ui.modules.modal.ui-modal-content :refer [ui-modal-content]]])\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.rad.authorization :as auth]\n    [com.fulcrologic.fulcro.dom :refer [div label input]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [taoensso.timbre :as log]))\n\n(defsc LoginForm [this {:ui/keys [username password] :as props} {:keys [visible?]}]\n  {:query               [:ui/username :ui/password]\n   :initial-state       {:ui/username \"shakira@example.com\"\n                         :ui/password \"password\"}\n   ::auth/provider      :local\n   ::auth/check-session `account/check-session\n   ::auth/logout        `account/logout\n   :ident               (fn [] [:component/id ::LoginForm])}\n\n  #?(:cljs\n     (ui-modal {:open (boolean visible?) :dimmer true}\n               (ui-modal-header {} \"Please Log In\")\n               (ui-modal-content {}\n                                 (div :.ui.form\n                                      (div :.ui.field\n                                           (label \"Username\")\n                                           (input {:type     \"email\"\n                                                   :onChange (fn [evt] (m/set-string! this :ui/username :event evt))\n                                                   :value    (or username \"\")}))\n                                      (div :.ui.field\n                                           (label \"Password\")\n                                           (input {:type     \"password\"\n                                                   :onChange (fn [evt] (m/set-string! this :ui/password :event evt))\n                                                   :value    (or password \"\")}))\n                                      (div :.ui.primary.button\n                                           {:onClick (fn [] (comp/transact! this [(account/login {:username username :password password})]))}\n                                           \"Login\"))))))\n"]}