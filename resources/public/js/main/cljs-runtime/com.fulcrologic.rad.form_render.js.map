{"version":3,"sources":["com/fulcrologic/rad/form_render.cljc"],"mappings":"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","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.form-render","js/com.fulcrologic.rad.form-render.render-hierarchy","com.fulcrologic.rad.form-render/render-hierarchy","cljs.core.atom","cljs.core/make-hierarchy","com.fulcrologic.rad.form-render/gen-dispatch","style-key","fallback-to-style?","p__88465","map__88467","cljs.core/--destructure-map","cljs.core.get","form-instance","parent","parent-relation","renv","id-attr","parent-options","G__88468","com.fulcrologic.fulcro.raw.components/component-options","parent-subform-options","G__88469","com.fulcrologic.rad.form_options.subform_options","style","or__5045__auto__","com.fulcrologic.rad.options_util._QMARK__BANG_","G__88470","and__5043__auto__","com.fulcrologic.rad.form-render-options/style","k","com.fulcrologic.rad.attributes-options/qualified-key","js/com.fulcrologic.rad.form-render.render-form","method-table__5642__auto__","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__88471","cljs.core/MultiFn","cljs.core.symbol","com.fulcrologic.rad.form-render/render-form","js/com.fulcrologic.rad.form-render.render-header","fexpr__88472","com.fulcrologic.rad.form-render/render-header","id-attr-dispatch","com.fulcrologic.rad.form-render-options/header-style","p__88473","map__88474","attr","com.fulcrologic.rad.attributes-options/identity?","options","sfoptions","js/com.fulcrologic.rad.form-render.render-fields","fexpr__88475","com.fulcrologic.rad.form-render/render-fields","com.fulcrologic.rad.form-render-options/fields-style","js/com.fulcrologic.rad.form-render.render-footer","fexpr__88476","com.fulcrologic.rad.form-render/render-footer","com.fulcrologic.rad.form-render-options/footer-style","p__88477","map__88480","js/com.fulcrologic.rad.form-render.render-field","fexpr__88481","com.fulcrologic.rad.form-render/render-field","p__88482","map__88483","field-attr","cljs.core.get_in","com.fulcrologic.rad.form-options/field-styles","com.fulcrologic.rad.form-options/field-style","com.fulcrologic.rad.attributes-options/style","com.fulcrologic.rad.attributes-options/type","com.fulcrologic.rad.form-render/derive!","child-keyword","parent-keyword","cljs.core.swap_BANG_","cljs.core/derive","com.fulcrologic.rad.form-render/allow-defaults!","all-attrs","seq__88484","cljs.core/seq","chunk__88485","count__88486","i__88487","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","a","com.fulcrologic.rad.form-render/isa?","child","cljs.core/deref","cljs.core.isa_QMARK_"],"sourcesContent":["(ns com.fulcrologic.rad.form-render\n  \"An extensible form rendering system that uses styles to allow you to generate rendering for forms that conform to patterns.\n\n   See Form Rendering in the RAD book.\n\n   Features:\n\n   The renv is expected to be a form rendering-env, which contains things like:\n\n   * ::form/master-form - The top-most form in the entire form tree\n   * ::form/form-instance - Equivalent to this form\n   * ::form/parent - when in a subform, this is the immediate parent\n   * ::form/parent-relation - when in a subform, this is the ref key that was followed to get there.\n\n   The primary idea is that the `render-form` multimethod is called by RAD's generated forms, and the default for\n   that does whatever the current rendering plugin has configured.\n\n   By placing an `fro/style` on a form, you can cause a dispatch to your own `defmethod` to do that rendering. Several\n   other multimethods (render-fields, render-field, render-header, and render-footer) are defined as well (along\n   with `fro/header-style` etc.), though these have no defaults other than `render-field` (whose default calls\n   through to the underlying UI plugin).\n\n   All of these multimethods use vectors for dispatch, and a custom hierarchy that this sets things up to allow for\n   polymorphism among the rendering methods.\n\n   This ns has some methods for working with that hierarchy:\n\n   * `derive!` - Add a parent/child relationship between keywords\n   * `allow-defaults!` - Pre-calls `derive!` on every qualified keyword in the given RAD model so that :default\n     behaves as the parent of them.\n   * `is-a?` - Just like clojure.core/isa?, but works on the render hierarchy\n\n   See the RAD Developer's Guide for more information on leveraging the\n   dispatch hierarchy.\n  \"\n  (:refer-clojure :exclude [isa?])\n  (:require\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.raw.components :as rc]\n    [com.fulcrologic.rad :as rad]\n    [com.fulcrologic.rad.attributes-options :as ao]\n    [com.fulcrologic.rad.form-options :as fo]\n    [com.fulcrologic.rad.form-render-options :as fro]\n    [com.fulcrologic.rad.options-util :refer [?!]]))\n\n(defonce render-hierarchy #?(:cljs (atom (make-hierarchy))\n                             :clj  (make-hierarchy)))\n\n(defn gen-dispatch\n  \"Generate a multimethod dispatch function that assumes the attribute is an id-attribute (being called\n   in the context of the rendering env's form-instance) and attempts to find the `style-key` in\n   the subform options of the parent form (to override any declared on the form itself), then\n   on the form-instance, and finally on the attribute.\n\n   If `fallback-to-style?` is true, then if it does not find `style-key` it will repeat the sequence using\n   fro/style.\"\n  [style-key fallback-to-style?]\n  (fn [{:com.fulcrologic.rad.form/keys [form-instance parent parent-relation] :as renv} id-attr]\n    (let [parent-options         (some-> parent (rc/component-options))\n          parent-subform-options (some-> parent-options (fo/subform-options parent-relation))\n          style                  (or\n                                   (?! (style-key parent-subform-options) id-attr renv)\n                                   (?! (style-key (rc/component-options form-instance)) id-attr renv)\n                                   (?! (style-key id-attr) id-attr renv)\n                                   (and fallback-to-style?\n                                     (or\n                                       (?! (fro/style parent-subform-options) id-attr renv)\n                                       (?! (fro/style (rc/component-options form-instance)) id-attr renv)\n                                       (?! (fro/style id-attr) id-attr renv)))\n                                   :default)\n          k                      (ao/qualified-key id-attr)]\n      [k style])))\n\n(defmulti render-form\n  \"[rendering-env id-attr]\n\n   Render a form using the given environment. This is the top-level call from the (default) body of any\n   form that switches rendering to these multimethods. Normally it might call `render-header`,\n   `render-fields`, and `render-footer`.\n\n   Dispatches to a vector of `[id-keyword-of-entity style]`\n\n   The style is derived as follows:\n\n   * The dispatch function will first look to see if it is rendering as a subform\n     * if so will find the subform options on the `parent` for `parent-relation` and look for the fro/style there.\n   * If that fails, it will look for the fro/style on the form-instance being rendered\n   * finally will look on the attribute.\n   * Otherwise it will use a style of `:default`\n\n   See namespace documentation as well.\n   \"\n  (gen-dispatch fro/style false)\n  :hierarchy #?(:cljs render-hierarchy\n                :clj  (var render-hierarchy)))\n\n(defmulti render-header\n  \"[env attr]\n\n   Render something before the given attr. The id attr will be passed when it is the\n   entire form *itself*. This MAY be composed into rendering\n   any time you want. Typically, it is composed in front of entire forms, and when\n   there is nested content (like subforms).\n\n   Dispatch on [attr-key style].\n\n   The style is derived as follows:\n\n   * If `attr` is an `ao/identity?` attribute\n   ** dispatch identically to render-form, but looking for `fro/header-style` (preferred) and `fro/style` fallback.\n   * If it is NOT an id attribute, then:\n   ** Look for fro/header-style on the current form's subform options at the qualified key of attr\n   ** Look for fro/header-style on the attr\n   ** Look for fro/style on the current form's subform options at the qualified key of attr\n   ** Look for fro/style on the attr\n\n   Otherwise style will be `:default`\n\n   See namespace documentation as well.\n   \"\n  (let [id-attr-dispatch (gen-dispatch fro/header-style true)]\n    (fn [{:com.fulcrologic.rad.form/keys [form-instance] :as renv} attr]\n      (if (ao/identity? attr)\n        (id-attr-dispatch renv attr)\n        (let [options   (rc/component-options form-instance)\n              sfoptions (fo/subform-options options attr)\n              style     (or\n                          (?! (fro/header-style sfoptions) attr renv)\n                          (?! (fro/header-style attr) attr renv)\n                          (?! (fro/style sfoptions) attr renv)\n                          (?! (fro/style attr) attr renv)\n                          :default)]\n          [(ao/qualified-key attr) style]))))\n  :hierarchy #?(:cljs render-hierarchy\n                :clj  (var render-hierarchy)))\n\n(defmulti render-fields\n  \"[rendering-env id-attribute]\n\n   Render the fields. Dispatch is identical to `render-form` ([id-key style]), and this method is always intended to be\n   called in the context of the currently-rendering form-instance with an id-attribute.\n\n   The style will first try to find fro/fields-style, and then fro/style.\n\n   See namespace documentation as well.\n   \"\n  (gen-dispatch fro/fields-style true)\n  :hierarchy #?(:cljs render-hierarchy\n                :clj  (var render-hierarchy)))\n\n(defmulti render-footer\n  \"[renv attr]\n\n   Dispatch works identically to `render-header`, other than it looks for `fro/footer-style` and then `fro/style`.\n\n   See namespace documentation as well.\n   \"\n  (let [id-attr-dispatch (gen-dispatch fro/footer-style true)]\n    (fn [{:com.fulcrologic.rad.form/keys [form-instance] :as renv} attr]\n      (if (ao/identity? attr)\n        (id-attr-dispatch renv attr)\n        (let [options   (rc/component-options form-instance)\n              sfoptions (fo/subform-options options attr)\n              style     (or\n                          (?! (fro/footer-style sfoptions) attr renv)\n                          (?! (fro/footer-style attr) attr renv)\n                          (?! (fro/style sfoptions) attr renv)\n                          (?! (fro/style attr) attr renv)\n                          :default)]\n          [(ao/qualified-key attr) style]))))\n  :hierarchy #?(:cljs render-hierarchy\n                :clj  (var render-hierarchy)))\n\n(defmulti render-field\n  \"[env attr]\n\n   Render a field.\n\n   Dispatches on [type style].\n\n   The style is derived as follows:\n\n   * Look for fro/style on the subform options. This is for the case of ref attributes where the field render\n     (which might need to wrap a to-many collection) must know the context that the subform will be rendered in,\n     and that should be preferred.\n   * Then look in form `fo/field-styles` (map from k -> field style)\n   * Then look for `fro/style` on the attribute\n   * Then look for `fo/field-style` on the attribute\n   * Then look for `ao/style` on the attribute\n   * Otherwise :default.\n\n   See namespace documentation as well.\n   \"\n  (fn [{:com.fulcrologic.rad.form/keys [form-instance] :as renv} field-attr]\n    (let [options   (rc/component-options form-instance)\n          k         (ao/qualified-key field-attr)\n          sfoptions (fo/subform-options options field-attr)\n          style     (or\n                      (?! (fro/style sfoptions) field-attr renv)\n                      (?! (get-in options [fo/field-styles k]) form-instance)\n                      (?! (fro/style field-attr) renv)\n                      (?! (fo/field-style field-attr) form-instance)\n                      (?! (ao/style field-attr) form-instance)\n                      :default)]\n      [(ao/type field-attr) style]))\n  :hierarchy #?(:cljs render-hierarchy\n                :clj  (var render-hierarchy)))\n\n(defn derive!\n  \"Cause the given `child-keyword `to act as-if it were `parent-keyword `in the rendering multimethods. This\n  does a `derive `on a custom hierarchy that is used for the rendering multimethods. The relation can be between\n  styles, RAD attribute keys, etc.\n\n  If you add your own multimethods you may choose to use `render-hierarchy `from this namespace to get all of these.\n  e.g. `(defmulti sym (fn [] ...) :hierarchy gf/render-hierarchy) `. See Clojure documentation on multimethods\n  and derive. \"\n  [child-keyword parent-keyword]\n  #?(:cljs (swap! render-hierarchy derive child-keyword parent-keyword)\n     :clj  (alter-var-root #'render-hierarchy derive child-keyword parent-keyword)))\n\n(defn allow-defaults!\n  \" Allow :default to be a fall-through any time an attribute's qualified key is used as a dispatch value on\n  rendering multimethods. \"\n  [all-attrs]\n  (doseq [a all-attrs]\n    (derive! (ao/qualified-key a) :default)))\n\n(defn isa?\n  \" Just like clojure.core/isa?, but uses the render-hierarchy. \"\n  [child parent]\n  #?(:cljs (clojure.core/isa? @render-hierarchy child parent)\n     :clj  (clojure.core/isa? render-hierarchy child parent)))\n"]}