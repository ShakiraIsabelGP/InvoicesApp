{"version":3,"sources":["com/fulcrologic/rad/application.cljc"],"mappings":"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","names":["p__86599","map__86600","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.rad.application/secured-request-middleware","csrf-token","com.fulcrologic.fulcro.networking.http_remote.wrap_fulcro_request","com.fulcrologic.fulcro.networking.file_upload.wrap_file_upload","G__86601","com.fulcrologic.fulcro.networking.http_remote.wrap_csrf_token","com.fulcrologic.rad.application/default-network-blacklist","com.fulcrologic.fulcro.data-fetch/marker-table","com.fulcrologic.rad.application/elision-predicate","blacklist","k","kw-namespace","and__5043__auto__","cljs.core/Keyword","cljs.core/namespace","cljs.core/vector?","cljs.core/first","ns","G__86602","cljs.core/contains?","cljs.core._EQ_","com.fulcrologic.rad.application/elide-params","params","pred","clojure.walk/postwalk","x","cljs.core/count","G__86603","p__86605","map__86606","com.fulcrologic.rad.application/elide-ast-nodes","key","union-key","children","ast","elision-predicate","union-elision?","or__5045__auto__","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.pr_str","new-ast","cljs.core.update","c","cljs.core/vec","p1__86604#","cljs.core.keep","cljs.core/seq","cljs.core.dissoc","com.fulcrologic.rad.application/global-eql-transform","mutation?","cljs.core/Symbol","has-children?","G__86607","cljs.core/not","cljs.core/conj","edn-query-language.core/expr->ast","p__86608","map__86609","com.fulcrologic.rad.application/default-remote-error?","body","result","com.fulcrologic.fulcro.application/default-remote-error?","cljs.core.get_in","p__86610","map__86611","com.fulcrologic.rad.application/fulcro-rad-app","remote-error?","options","com.fulcrologic.fulcro.application.fulcro_app","cljs.core.merge","token","js/fulcro_network_csrf_token","com.fulcrologic.fulcro.networking.http-remote/fulcro-http-remote","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.application/install-ui-controls!","app","controls","map__86612","runtime-atom","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.rad.application\n  (:require\n    [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :as mroot]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.networking.http-remote :as net]\n         [com.fulcrologic.fulcro.networking.file-upload :as file-upload]])\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    [clojure.walk :as walk]))\n\n#?(:cljs\n   (defn secured-request-middleware [{:keys [csrf-token]}]\n     (->\n       (net/wrap-fulcro-request)\n       (file-upload/wrap-file-upload)\n       (cond->\n         csrf-token (net/wrap-csrf-token csrf-token)))))\n\n(def default-network-blacklist\n  \"A set of the keywords that should not appear on network requests.\"\n  #{::uism/asm-id\n    ::app/active-remotes\n    :com.fulcrologic.rad.blob/blobs\n    :com.fulcrologic.rad.picker-options/options-cache\n    df/marker-table\n    ::fs/config})\n\n(defn elision-predicate\n  \"Returns an elision predicate that will return true if the keyword k is in the blacklist or has the namespace\n  `ui`.\"\n  [blacklist]\n  (fn [k]\n    (let [kw-namespace (fn [k] (and (keyword? k) (namespace k)))\n          k            (if (vector? k) (first k) k)\n          ns           (some-> k kw-namespace)]\n      (or\n        (contains? blacklist k)\n        (and (string? ns) (= \"ui\" ns))))))\n\n(defn elide-params\n  \"Given a params map, elides any k-v pairs where `(pred k)` is false.\"\n  [params pred]\n  (walk/postwalk (fn [x]\n                   (if (and (vector? x) (= 2 (count x)) (pred (first x)))\n                     nil\n                     x))\n    params))\n\n(defn elide-ast-nodes\n  \"Like df/elide-ast-nodes but also applies elision-predicate logic to mutation params.\"\n  [{:keys [key union-key children] :as ast} elision-predicate]\n  (let [union-elision? (and union-key (elision-predicate union-key))]\n    (when-not (or union-elision? (elision-predicate key))\n      (when (and union-elision? (<= (count children) 2))\n        (log/warn \"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\n        load functions where the :without set contains \" (pr-str union-key)))\n      (let [new-ast (-> ast\n                      (update :children (fn [c] (vec (keep #(elide-ast-nodes % elision-predicate) c))))\n                      (update :params elide-params elision-predicate))]\n        (if (seq (:children new-ast))\n          new-ast\n          (dissoc new-ast :children))))))\n\n(defn global-eql-transform\n  \"Returns an EQL transform that removes `(pred k)` keywords from network requests.\"\n  [pred]\n  (fn [ast]\n    (let [mutation?     (symbol? (:dispatch-key ast))\n          has-children? (seq (:children ast))]\n      (cond-> (elide-ast-nodes ast pred)\n        (and mutation? (not has-children?)) (update :children conj (eql/expr->ast '*))\n        mutation? (update :children conj (eql/expr->ast :tempids))))))\n\n(defn default-remote-error?\n  \"Remote error detection for RAD that adds in support for form errors.\"\n  [{:keys [body] :as result}]\n  (or\n    (app/default-remote-error? result)\n    (seq (get-in body ['com.fulcrologic.rad.form/save-form\n                       :com.fulcrologic.rad.form/errors]))))\n\n(defn fulcro-rad-app\n  \"Create a new fulcro RAD application with reasonable defaults.\n\n  `options` is the same as for `app/fulcro-app`. You should use caution when overridding the :optimized-render!\n   or `:global-eql-transform` options.\"\n  [{:keys [remote-error?] :as options}]\n  (app/fulcro-app\n    (merge\n      #?(:clj {}\n         :cljs\n         (let [token (when (exists? js/fulcro_network_csrf_token)\n                       js/fulcro_network_csrf_token)]\n           {:remotes {:remote (net/fulcro-http-remote {:url                \"/api\"\n                                                       :request-middleware (secured-request-middleware {:csrf-token token})})}}))\n      {:global-eql-transform (global-eql-transform (elision-predicate default-network-blacklist))\n       :optimized-render!    mroot/render!}\n      options\n      {:remote-error? (fn [result]\n                        (or\n                          (true? (?! remote-error? result))\n                          (default-remote-error? result)))})))\n\n(defn install-ui-controls!\n  \"Install the given control set as the RAD UI controls used for rendering forms. This should be called before mounting\n  your app. The `controls` is just a map from data type to a sub-map that contains a :default key, with optional\n  alternate renderings for that data type that can be selected with `::form/field-style {attr-key style-key}`.\"\n  [app controls]\n  (let [{::app/keys [runtime-atom]} app]\n    (swap! runtime-atom assoc :com.fulcrologic.rad/controls controls)))\n"]}