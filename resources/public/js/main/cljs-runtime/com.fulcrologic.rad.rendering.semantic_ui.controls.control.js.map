{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/controls/control.cljc"],"mappings":";AAYA,AAAA,AAAA;AAAA,IAAAA,+BAAA,2CAAA,uFAC0B,WAAKiB,EAAEA,MAAEA;AAAT,AAAA;GAD1B,0DAAA,oFAAgBA;AAAhB,AAAA,OAAAhB,mDAAA,FAAgBgB;AAAhB,AAAA,IAAAf,aAAA,CAAAC,wEAAAA,2EAAAA,LAAgBc,uDAAAA;IAAhBf,iBAAA,AAAAE,4BAAAF;iBAAAA,bAA0EoB;eAA1E,AAAAjB,4CAAAH,eAAA,tEAA0BgB;cAA1B,AAAAb,4CAAAH,eAAA,rEAAmCiB;kBAAnC,AAAAd,4CAAAH,eAAA,zEAA2CkB;oBAA3C,AAAAf,4CAAAH,eAAA,3EAAuDmB;AAAvD,AAEE,IAAMG,WAAS,AAACC,6EAA2BP;IAA3CK,aACgF,AAAClB,4CAAImB,SAASJ,YAAYD;IAD1GI,iBAAA,AAAAnB,4BAAAmB;kBAAAA,dACuEJ;YADvE,AAAAd,4CAAAkB,eAAA,nEACcG;eADd,AAAArB,4CAAAkB,eAAA,tEACoBI;aADpB,AAAAtB,4CAAAkB,eAAA,pEAC6BK;sBAD7B,AAAAvB,4CAAAkB,eAAA,7EACoCM;qBADpC,AAAAxB,4CAAAkB,eAAA,5EAC8CO;iBAD9C,AAAAzB,4CAAAkB,eAAA,xEACuDQ;AADvD,AAEE,oBAAI,iBAAAC,oBAAKX;AAAL,AAAA,oBAAAW;AAAmBb;;AAAnBa;;;AACF,IAAMN,YAAc,AAACO,oFAAGP,wDAAMR;IACxBW,sBAAU,AAACI,oFAAGJ,kEAAUX;IACxBY,qBAAU,iBAAAI,mBAAI,mBAAA,lBAAMJ;AAAV,AAAA,GAAAI;AAAAA;;AAAoB,OAACD,oFAAGH,iEAASZ;;;IAC3CiB,QAAU,AAACC,0CAAsBlB,SAASE;IAC1CO,eAAU,WAAKU;AAAL,AACE,AAACC,gDAAuBpB,SAASE,YAAYiB;;AAC7C,oBAAMV;AAAN,AACE,CAACA,yCAAAA,6DAAAA,tBAAST,yCAAAA,hCAASmB,yCAAAA;;AADrB;;AAEA,oBAAMT;AAAN,AACE,QAACA,uCAAAA,iDAAAA,ZAAOV,6BAAAA;;AADV;;;AARlB,AAUE,oBAAMY;AAAN,AACE,OAAAS,8EAAA,MAAA,mFAAA,2CAAA,oDAA0B,4CAAKnB,qBAC7B,AAAAmB,8EAAA,QAAA,qGAAA,lBAAWb,wBACX,iBAAAc,WAAelB;IAAfmB,WAA0B,kHAAA,2CAAA,oFAAA,4DAAA,7SAACC,uGAAMX,sHACOF,0EACAM,mEACAR;AAHxC,AAAA,kGAAAa,SAAAC,oCAAAD,SAAAC,hJAACpB,8CAAAA,iEAAAA;aAFH;;AADF;;;AAOF,OAAAsB,0DAAAC,mCAAA,uDAAA,6DAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,YAAA;;;;AAtBN,AAAA,GAAA,QAAAvC,gCAAAC,4CAAAC,gDAAAC,0DAAAC,sEAAAC,+EAAAC,uFAAAC;AAAA;AAAA,AAAA;;;qEAAA,AAAAC,oDAAA,AAAAT,4CAAAL,6BAAA,lMAAOgB;;;AAAP,AAAAD,+HAAA,6KAAAf,hPAAOgB;AAwBP,AAAK8B,wEAAW,2IAAA,2CAAA,sDAAA,5OAACC,wEAAa/B","names":["options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__93202","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.controls","js/com.fulcrologic.rad.rendering.semantic-ui.controls.control","js/com.fulcrologic.rad.rendering.semantic-ui.controls.control.Control","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.controls.control/Control","_","instance","control","control-key","input-factory","report-env","map__93203","controls","com.fulcrologic.rad.control.component_controls","label","onChange","action","disabled?","visible?","user-props","and__5043__auto__","com.fulcrologic.rad.options_util._QMARK__BANG_","or__5045__auto__","value","com.fulcrologic.rad.control/current-value","new-value","com.fulcrologic.rad.control/set-parameter!","com.fulcrologic.fulcro.dom.macro_create_element","G__93204","G__93205","cljs.core.merge","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.rad.rendering.semantic-ui.controls.control/ui-control","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.controls.control\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [com.fulcrologic.rad.report :as report]\n    [com.fulcrologic.rad.control :as control]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])\n    [taoensso.timbre :as log]))\n\n(defsc Control [_ {:keys [instance control control-key input-factory] :as report-env}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [controls (control/component-controls instance)\n        {:keys [label onChange action disabled? visible? user-props] :as control} (get controls control-key control)]\n    (if (and input-factory control)\n      (let [label     (or (?! label instance))\n            disabled? (?! disabled? instance)\n            visible?  (or (nil? visible?) (?! visible? instance))\n            value     (control/current-value instance control-key)\n            onChange  (fn [new-value]\n                        (control/set-parameter! instance control-key new-value)\n                        (when onChange\n                          (onChange instance new-value))\n                        (when action\n                          (action instance)))]\n        (when visible?\n          (dom/div :.ui.field {:key (str control-key)}\n            (dom/label label)\n            (input-factory report-env (merge user-props\n                                        {:disabled? disabled?\n                                         :value     value\n                                         :onChange  onChange})))))\n      (log/error \"Cannot render control. Missing input factory or control definition.\"))))\n\n(def ui-control (comp/factory Control {:keyfn :control-key}))\n"]}