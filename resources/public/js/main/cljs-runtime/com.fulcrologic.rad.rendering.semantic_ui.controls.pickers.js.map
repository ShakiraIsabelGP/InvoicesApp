{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/controls/pickers.cljc"],"mappings":"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","names":["options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__93224","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.controls","js/com.fulcrologic.rad.rendering.semantic-ui.controls.pickers","js/com.fulcrologic.rad.rendering.semantic-ui.controls.pickers.SimplePicker","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.controls.pickers/SimplePicker","_","instance","control-key","this","map__93222","map__93223","props","controls","com.fulcrologic.rad.control.component_controls","query-key","picker-options","com.fulcrologic.rad.picker_options.load_picker_options_BANG_","com.fulcrologic.fulcro.components/react-type","map__93225","label","onChange","disabled?","visible?","action","placeholder","options","user-props","control","or__5045__auto__","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.picker_options.current_picker_options","value","com.fulcrologic.rad.control/current-value","com.fulcrologic.fulcro.dom.macro_create_element","G__93226","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","cljs.core.merge","v","com.fulcrologic.rad.control/set-parameter!","*after-render*-orig-val__93227","*after-render*-temp-val__93228","com.fulcrologic.fulcro.raw.components/*after-render*","com.fulcrologic.rad.rendering.semantic-ui.controls.pickers/render-control","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.controls.pickers\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.raw.components :as rc]\n    [com.fulcrologic.rad.picker-options :as po]\n    [com.fulcrologic.rad.control :as control]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [taoensso.timbre :as log]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])))\n\n(defsc SimplePicker [_ {:keys [instance control-key]}]\n  {:shouldComponentUpdate (fn [_ _ _] true)\n   :componentDidMount     (fn [this]\n                            (let [{:keys [instance control-key] :as props} (comp/props this)\n                                  controls (control/component-controls instance)\n                                  {::po/keys [query-key] :as picker-options} (get controls control-key)]\n                              (when query-key\n                                (po/load-picker-options! instance (comp/react-type instance) props picker-options))))}\n  (let [controls (control/component-controls instance)\n        {:keys [label onChange disabled? visible? action placeholder options user-props] :as control} (get controls control-key)\n        options  (or (?! options instance)\n                     (po/current-picker-options instance control))]\n    (when control\n      (let [label       (or (?! label instance))\n            disabled?   (?! disabled? instance)\n            placeholder (?! placeholder instance)\n            visible?    (or (nil? visible?) (?! visible? instance))\n            value       (control/current-value instance control-key)]\n        (when visible?\n          (dom/div :.ui.field {:key (str control-key)}\n            (dom/label label)\n            (ui-wrapped-dropdown (merge\n                                   user-props\n                                   {:disabled    disabled?\n                                    :placeholder (str placeholder)\n                                    :options     options\n                                    :value       value\n                                    :onChange    (fn [v]\n                                                   (control/set-parameter! instance control-key v)\n                                                   (binding [rc/*after-render* true]\n                                                     (when onChange\n                                                       (onChange instance v))\n                                                     (when action\n                                                       (action instance))))}))))))))\n\n(def render-control (comp/factory SimplePicker {:keyfn :control-key}))\n"]}