{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/blob_field.cljc"],"mappings":"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","names":["com.fulcrologic.rad.rendering.semantic-ui.blob-field/evt->js-files","evt","js-file-list","cljs.core.map","file-idx","js-file","name","cljs.core.range","options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__93252","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","map__93253","com.fulcrologic.fulcro.components/get-computed","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.blob-field","js/com.fulcrologic.rad.rendering.semantic-ui.blob-field.ImageUploadField","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.blob-field/ImageUploadField","this","form-instance","env","accept-file-types","qualified-key","attribute","r","com.fulcrologic.rad.rendering.semantic_ui.blob_field.goog$module$goog$object.set","temp__5804__auto__","i","com.fulcrologic.rad.rendering.semantic_ui.blob_field.goog$module$goog$object.get","map__93251","file","cljs.core/first","com.fulcrologic.rad.blob/upload-file!","com.fulcrologic.fulcro.components/get-ident","map__93254","props","url-key","com.fulcrologic.rad.options-util/narrow-keyword","status","com.fulcrologic.rad.blob/status-key","progress","com.fulcrologic.rad.blob/progress-key","url","save-ref","on-change","on-click","com.fulcrologic.fulcro.components.get_state","label","com.fulcrologic.rad.form/field-label","com.fulcrologic.fulcro.dom.macro_create_element","cljs.core.not_EQ_","G__93255","cljs.core/Keyword","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.semantic-ui.modules.progress.ui-progress/ui-progress","or__5045__auto__","cljs.core/seq","G__93256","cljs.core/rand-int","cljs.core.assoc","com.fulcrologic.rad.options-util/?!","com.fulcrologic.rad.rendering.semantic-ui.blob-field/ui-image-upload-field","com.fulcrologic.fulcro.components.computed_factory","G__93257","com.fulcrologic.rad.rendering.semantic-ui.blob-field/render-image-upload","map__93258","map__93259","js/com.fulcrologic.rad.rendering.semantic-ui.blob-field.FileUploadField","com.fulcrologic.rad.rendering.semantic-ui.blob-field/FileUploadField","master-form","can-change?","com.fulcrologic.rad.blob/url-key","name-key","com.fulcrologic.rad.blob/filename-key","filename","pct","com.fulcrologic.rad.blob/upload-percentage","top-class","com.fulcrologic.rad.rendering.semantic-ui.form-options/top-class","com.fulcrologic.rad.blob/blob-downloadable?","com.fulcrologic.fulcro-i18n.i18n/fulcro_tr","com.fulcrologic.rad.blob/uploading?","com.fulcrologic.rad.rendering.semantic-ui.blob-field/ui-file-upload-field","G__93260","com.fulcrologic.rad.rendering.semantic-ui.blob-field/render-file-upload"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.blob-field\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    #?@(:cljs [[com.fulcrologic.fulcro.dom :as dom :refer [div input]]\n               [goog.object :as gobj]\n               [com.fulcrologic.semantic-ui.modules.progress.ui-progress :refer [ui-progress]]\n               [com.fulcrologic.fulcro.networking.file-upload :as file-upload]]\n        :clj  [[com.fulcrologic.fulcro.dom-server :as dom :refer [div input]]])\n    [com.fulcrologic.rad.form :as form]\n    [clojure.core.async :as async]\n    [com.fulcrologic.fulcro-i18n.i18n :refer [tr]]\n    [com.fulcrologic.rad.attributes :as attr]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.rad.blob :as blob]\n    [com.fulcrologic.rad.options-util :refer [?! narrow-keyword]]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.rendering.semantic-ui.field :refer [render-field-factory]]\n    [com.fulcrologic.rad.rendering.semantic-ui.form-options :as sufo]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]))\n\n(defn evt->js-files [evt]\n  #?(:cljs\n     (let [js-file-list (.. evt -target -files)]\n       (map (fn [file-idx]\n              (let [js-file (.item js-file-list file-idx)\n                    name    (.-name js-file)]\n                js-file))\n         (range (.-length js-file-list))))))\n\n(defsc ImageUploadField [this\n                         {::form/keys [form-instance] :as env}\n                         {::blob/keys [accept-file-types]\n                          ::attr/keys [qualified-key] :as attribute}]\n  {:initLocalState (fn [this]\n                     #?(:cljs\n                        {:save-ref  (fn [r] (gobj/set this \"fileinput\" r))\n                         :on-click  (fn [evt] (when-let [i (gobj/get this \"fileinput\")]\n                                                (.click i)))\n                         :on-change (fn [evt]\n                                      (let [{::form/keys [form-instance]} (comp/props this)\n                                            attribute (comp/get-computed this)\n                                            file      (-> evt evt->js-files first)]\n                                        (blob/upload-file! this attribute file {:file-ident (comp/get-ident form-instance)})))}))}\n  #?(:cljs\n     (let [props    (comp/props form-instance)\n           url-key  (narrow-keyword qualified-key \"url\")\n           status   (get props (blob/status-key qualified-key))\n           progress (get props (blob/progress-key qualified-key))\n           url      (get props url-key)\n           {:keys [save-ref on-change on-click]} (comp/get-state this)\n           label    (form/field-label env attribute)]\n       (div :.field {:key     (str qualified-key)\n                     :onClick (fn []\n                                (when (not= status :uploading)\n                                  (on-click)))}\n         (dom/label label)\n         (div :.ui.tiny.image\n           (case status\n             :uploading (dom/div :.ui.segment {:style {:minHeight \"100px\"}}\n                          (dom/div :.ui.active.loader)\n                          (ui-progress {:active true :percent (or progress 0) :attached \"bottom\"}))\n             :failed (dom/div :.ui.segment {:style {:minHeight \"100px\"}}\n                       \"Upload failed.\")\n             (if (seq url)\n               (dom/img :.ui.tiny.image {:src   url\n                                         :style {:border \"1px solid lightgray\"}})\n               (dom/div :.ui.segment {:style {:minHeight \"100px\"}})))\n           (dom/input (cond-> {:id       (str qualified-key)\n                               :ref      save-ref\n                               :style    {:position \"absolute\"\n                                          :opacity  0\n                                          :top      0\n                                          :right    0}\n                               :key      (rand-int 1000000)\n                               :onChange on-change\n                               :type     \"file\"}\n                        accept-file-types (assoc :allow (?! accept-file-types)))))))))\n\n(def ui-image-upload-field (comp/computed-factory ImageUploadField\n                             {:keyfn (fn [props] (some-> props comp/get-computed ::attr/qualified-key))}))\n\n(defn render-image-upload [env attribute]\n  (ui-image-upload-field env attribute))\n\n(defsc FileUploadField [this\n                        {::form/keys [form-instance master-form] :as env}\n                        {::blob/keys [accept-file-types can-change?]\n                         ::attr/keys [qualified-key] :as attribute}]\n  {:componentDidMount (fn [this]\n                        (comment \"TRIGGER UPLOAD IF CONFIG SAYS TO?\"))\n   :initLocalState    (fn [this]\n                        #?(:cljs\n                           {:save-ref  (fn [r] (gobj/set this \"fileinput\" r))\n                            :on-click  (fn [evt] (when-let [i (gobj/get this \"fileinput\")]\n                                                   (.click i)))\n                            :on-change (fn [evt]\n                                         (let [env       (comp/props this)\n                                               attribute (comp/get-computed this)\n                                               file      (-> evt evt->js-files first)]\n                                           (blob/upload-file! this attribute file {:file-ident []})))}))}\n  (let [props     (comp/props form-instance)\n        url-key   (blob/url-key qualified-key)\n        name-key  (blob/filename-key qualified-key)\n        url       (get props url-key)\n        filename  (get props name-key)\n        pct       (blob/upload-percentage props qualified-key)\n        label     (form/field-label env attribute)\n        top-class (sufo/top-class form-instance attribute)]\n    (div {:className (or top-class \"field\")\n          :key       (str qualified-key)}\n      (dom/label label)\n      (cond\n        (blob/blob-downloadable? props qualified-key)\n        (dom/a {:href (str url \"?filename=\" filename)} (tr \"Download\"))\n\n        (blob/uploading? props qualified-key)\n        (dom/div :.ui.small.blue.progress\n          (div :.bar {:style {:transitionDuration \"300ms\"\n                              :display            \"block\"\n                              :width              pct}}\n            (div :.progress pct)))))))\n\n(def ui-file-upload-field (comp/computed-factory FileUploadField\n                            {:keyfn (fn [props] (some-> props comp/get-computed ::attr/qualified-key))}))\n\n(defn render-file-upload [env attribute]\n  (ui-file-upload-field env attribute))\n"]}