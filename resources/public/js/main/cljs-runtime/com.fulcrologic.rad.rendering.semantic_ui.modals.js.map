{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/modals.cljc"],"mappings":";AASA,AAAA,GAAA,QAAAA,gCAAAC,4CAAAC,gDAAAC,0DAAAC,sEAAAC,6EAAAC;AAAA;AAAA,AAAA,6DAAA,qEAAAC,lIAAO8B;AAAP,AAAA,IAAA7B,wBAAA,AAAA,wFAAA,CAAAC,oFAAAA,gJAAAA,9DAAO4B,4HAAAA;IAAP3B,aAAA,AAAAC,6CAAAJ,wBAAO8B;IAAPzB,sBAAA,AAAAC,4CAAAH,WAAA,IAAA;IAAAI,uBAAA,AAAAD,4CAAAH,WAAA,IAAA;AAAA,AAAA,QAAAF,sDAAAA,oDAAAI,oBAAAE,wBAAAN,gCAAAI,oBAAAE;;;;AAAA,AAAAC,oHAAA,2CAAA,kEAAA,KAAA,wEAAA,8JAAA,0DAAA,kFAAAC,/hBAAOqB,yhBAAWC;AAAlB,AAAA,IAAArB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAA+BsB;WAA/B,AAAApB,4CAAAF,eAAA,lEAAkCuB;oBAAlC,AAAArB,4CAAAF,eAAA,3EAC+BwB;sBAD/B,AAAAtB,4CAAAF,eAAA,7EAE+ByB;kBAF/B,AAAAvB,4CAAAF,eAAA,zEAG+B0B;oBAH/B,AAAAxB,4CAAAF,eAAA,3EAI+B2B;AAJ/B,AAAA,OAAAxB,uDAAA,NAAkBkB;AAAlB,AAAA,IAAAjB,kCAAAC;IAAAC,qCAAAC;IAAAC,qCAAAC;IAAAC,kCAAA,iBAAAC,mBAAAN;AAAA,AAAA,oBAAAM;AAAAA;;AAAA,IAAAC,WAAkBS;IAAlBR,WAAA,mFAAA,QAAA;AAAA,AAAA,QAAAC,4EAAAA,0EAAAF,SAAAC,YAAAC,sDAAAF,SAAAC;;;IAAAE,qCAAA,AAAAC,uEAAA,iBAAAL,mBAAAN;AAAA,AAAA,oBAAAM;AAAAA;;AAAA,IAAAM,WAAkBI;IAAlBH,WAAA,mFAAA,QAAA;AAAA,AAAA,QAAAJ,4EAAAA,0EAAAG,SAAAC,YAAAJ,sDAAAG,SAAAC;;;IAAAC,qCAAkBE;AAAlB,AAAA,CAAAhB,oDAAAK;;AAAA,CAAAH,uDAAAQ;;AAAA,CAAAN,uDAAAU;;AAAA,IAAA,AAAA,AAAA,AAME,mEAAA,2CAAA,sDAAA,7JAACS,0KACC,4EAAA,5EAACC,+GACC,iBAAAC,aAAqB,AAACG,6CAAgB,iBAAAtB,mBAAIW;AAAJ,AAAA,oBAAAX;AAAAA;;AAAO,OAACuB;;;mBAA9C,AAAAtC,4CAAAkC,WAAA,IAAA,1EAAOE;IAAPD,aAG2B,2HAAA,2CAAA,iGAAA,vQAACO,qEAAmBjB,MAAKE,KAAKS,aAAaR,cAAcC,gJAC9BC,sGACAC;IALtDI,iBAAA,AAAA9B,4BAAA8B;mBAAA,AAAA7B,4CAAA6B,eAAA,1EACcI;iBADd,AAAAjC,4CAAA6B,eAAA,xEAEcK;iBAFd,AAAAlC,4CAAA6B,eAAA,xEAGcM;AAHd,AAME,QAACF,6CAAAA,yDAAAA,dAAaC,qCAAAA;;UAdtB,AAAA,CAAA3B,uDAAAD;;AAAA,CAAAD,uDAAAD;;AAAA,CAAAD,oDAAAD;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAKmC,iEAyCH,AAACC,wEAAapB","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.modals","js/com.fulcrologic.rad.rendering.semantic-ui.modals.FormModal","js-props__50841__auto__","render__50842__auto__","com.fulcrologic.fulcro.components/component-options","vec__92949","com.fulcrologic.fulcro.components/use-fulcro","this__50843__auto__","cljs.core.nth","props__50844__auto__","com.fulcrologic.fulcro.components/add-hook-options!","p__92952","map__92953","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.components/wrapped-render","*app*-orig-val__92954","com.fulcrologic.fulcro.components/*app*","*shared*-orig-val__92955","com.fulcrologic.fulcro.components/*shared*","*parent*-orig-val__92956","com.fulcrologic.fulcro.components/*parent*","*app*-temp-val__92957","or__5045__auto__","G__92960","G__92961","com.fulcrologic.fulcro.components/isoget-in","*shared*-temp-val__92958","com.fulcrologic.fulcro.components.shared","G__92962","G__92963","*parent*-temp-val__92959","com.fulcrologic.rad.rendering.semantic-ui.modals/FormModal","this","id","Form","save-mutation","cancel-mutation","save-params","cancel-params","com.fulcrologic.semantic-ui.modules.modal.ui-modal/ui-modal","com.fulcrologic.semantic-ui.modules.modal.ui-modal-content/ui-modal-content","vec__92964","map__92967","generated-id","com.fulcrologic.fulcro.react.hooks/use-state","com.fulcrologic.fulcro.algorithms.tempid.tempid","form-factory","form-props","form-state","com.fulcrologic.rad.rad_hooks.use_form","com.fulcrologic.rad.rendering.semantic-ui.modals/ui-form-modal","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.modals\n  (:require\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.react.hooks :as hooks]\n    [com.fulcrologic.rad.rad-hooks :as rad-hooks]\n    [com.fulcrologic.semantic-ui.modules.modal.ui-modal :refer [ui-modal]]\n    [com.fulcrologic.semantic-ui.modules.modal.ui-modal-content :refer [ui-modal-content]]))\n\n(defsc FormModal [this {:keys [id Form\n                               save-mutation\n                               cancel-mutation\n                               save-params\n                               cancel-params]}]\n  {:use-hooks? true}\n  (ui-modal {:open true}\n    (ui-modal-content {}\n      (let [[generated-id] (hooks/use-state (or id (tempid/tempid)))\n            {:keys [form-factory\n                    form-props\n                    form-state]} (rad-hooks/use-form this Form generated-id save-mutation cancel-mutation\n                                   {:save-mutation-params   save-params\n                                    :cancel-mutation-params cancel-params})]\n        (form-factory form-props)))))\n\n(def ui-form-modal\n  \"[{:keys [id Form save-mutation cancel-mutation save-params cancel-params]}]\n\n    Render a form in a Semantic UI Modal.\n\n    :Form - Required. The form to use for edit/create\n    :save-mutation - Required. A *mutation* that will be transacted with the final ident if/when the form is saved.\n    :cancel-mutation - Required. A *mutation* that will be transacted if the cancel button is pressed.\n    :id - Optional. If not supplied will create a new instance. If supplied it will load and edit it.\n    :save-params - Optional. Extra parameters (beyond the `:ident` that is auto-included) to pass to the save-mutation`\n    :cancel-params - Optional. Parameters to pass to the cancel-mutation`\n\n    Example usage:\n\n    ```\n    (defmutation saved [{:keys [ident]}]\n      (action [{:keys [state]}]\n        (swap! state update-in [:component/id ::Container] assoc\n          :ui/selected-account ident\n          :ui/open? false)))\n\n    (defmutation cancel [_]\n      (action [{:keys [state]}]\n        (swap! state update-in [:component/id ::Container] assoc\n          :ui/open? false)))\n\n    (defsc Container [this {:ui/keys [open? selected-account edit-id] :as props}]\n      {:query         [:ui/open? :ui/selected-account]\n       :ident         (fn [] [:component/id ::Container])\n       :initial-state {}}\n      (comp/fragment {}\n        (when open?\n          (ui-form-modal {:Form            BriefAccountForm\n                          :save-mutation   saved\n                          :cancel-mutation cancel}))\n        (dom/div (str selected-account))\n        (dom/button {:onClick (fn []\n                                (comp/transact! this [(m/set-props {:ui/open?   true})]))} \\\"New\\\")))\n\n        ```\n  \"\n  (comp/factory FormModal))\n"]}