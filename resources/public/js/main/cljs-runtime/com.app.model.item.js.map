{"version":3,"sources":["com/app/model/item.cljc"],"mappings":";AASA,AAAA,AAAA;AAAA,IAAAA,+BAAA,2CAAA,wDAAA,yCAAiBC;AAAjB,AAAA,0FAAA,yDAAA;GAAA,oDAAA,yCAAAA,EAAAC;AAAA,AAAA,0FAAA,yDAAA,AAAA,uFAAAA;GAAA,0DAAA,6CAAiBD;AAAjB,AAAA,OAAAE,mDAAA,FAAiBF;AAAjB,AAAA,YAAA,CAAAG,wEAAAA,2EAAAA,LAAiBH,uDAAAA,9MAAEA;AAAnB,AAAA;;;AAAA,AAAA,GAAA,QAAAI,gCAAAC,oCAAAC,0CAAAC,+CAAAC;AAAA;AAAA,AAAA;;;8BAAA,AAAAC,oDAAA,AAAAC,4CAAAX,6BAAA,3JAAOa;;;AAAP,AAAAD,wFAAA,iGAAAZ,7HAAOa;AAIP,gCAAA,2CAAA,4EAAA,sBAAA,qEAAA,OAAA,qEAAA,OAAA,mEAAA,OAAA,qEAAA,pdAAKC;AAML,wBAAA,AAAAC,6CAAA,yDAAA,sDAAA,AAAAC,oBAAA,uGAAA,mDAAA,mEAAA,2CAAA,6EAAA,7hBAASC,wPACCC,4DACAC;AAEV,8BAAA,AAAAJ,6CAAA,oEAAA,qDAAA,AAAAC,oBAAA,kGAAA,iFAAA,wUAAA,mEAAA,2CAAA,6EAAA,94BAASI,wQACCC,gNACAC,yDAAqB,AAACC,cAAI,AAACC,eAAKV,gCAChCW,yDAAqBX,8BACrBK;AAEV,+BAAA,AAAAJ,6CAAA,4DAAA,0DAAA,AAAAC,oBAAA,kGAAA,iFAAA,2HAAA,mEAAA,2CAAA,6EAAA,/rBAASU,sQACCL,gNACAF;AAEV,iCAAA,AAAAJ,6CAAA,2EAAA,0DAAA,AAAAC,oBAAA,kGAAA,iFAAA,2HAAA,mEAAA,2CAAA,6EAAA,htBAASW,uRACCN,gNACAF;AAEV,2BAAA,AAAAJ,6CAAA,4DAAA,2DAAA,AAAAC,oBAAA,kGAAA,iFAAA,2HAAA,mEAAA,2CAAA,6EAAA,5rBAASY,mQACCP,gNACAF;AAEV,8BAAA,AAAAJ,6CAAA,qEAAA,oDAAA,AAAAC,oBAAA,kGAAA,iFAAA,2HAAA,mEAAA,2CAAA,6EAAA,jsBAASa,wQACCR,gNACAF;AAEV,+BAAA,AAAAJ,6CAAA,sEAAA,mDAAA,AAAAC,oBAAA,8FAAA,yDAAA,2GAAA,mFAAA,2CAAA,sEAAA,mFAAA,iFAAA,n0BAASc,yQACCC,uqBAEa,WAAAC,SAAoC/B;AAApC,AAAA,IAAAgC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAAA,NAA+BG;mBAA/B,AAAAzB,4CAAAsB,eAAA,1EAAaE;AAAb,AAAA;KAHvB,2CAAA,6EAAA;AAQA,gCAAA,hCAAKE,mHAAYpB,sBAAGS,6BAAUN,4BAASO,+BAAYC,yBAAMC,4BAASC","names":["options__35388__auto__","_","props","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/com","js/com.app","js/com.app.model","js/com.app.model.item","js/com.app.model.item.Category","com.fulcrologic.fulcro.components/react-constructor","cljs.core.get","com.fulcrologic.fulcro.components/configure-component!","com.app.model.item/Category","com.app.model.item/categories","com.fulcrologic.rad.attributes/new-attribute","cljs.core/with-meta","com.app.model.item/id","com.fulcrologic.rad.attributes-options/identity?","com.fulcrologic.rad.attributes-options/schema","com.app.model.item/category","com.fulcrologic.rad.attributes-options/identities","com.fulcrologic.rad.attributes-options/enumerated-values","cljs.core/set","cljs.core/keys","com.fulcrologic.rad.attributes-options/enumerated-labels","com.app.model.item/item-name","com.app.model.item/description","com.app.model.item/price","com.app.model.item/in-stock","com.app.model.item/all-items","com.fulcrologic.rad.attributes-options/target","p__60588","map__60589","cljs.core/--destructure-map","query-params","env","com.app.model.item/attributes"],"sourcesContent":["(ns com.app.model.item\n  (:require\n    [com.fulcrologic.rad.attributes :as attr :refer [defattr]]\n    [com.fulcrologic.rad.attributes-options :as ao]\n    [com.wsscode.pathom.connect :as pc]\n    [com.fulcrologic.fulcro.components :refer [defsc]]\n    #?(:clj [com.app.components.dbqueries :as queries])\n    [taoensso.timbre :as log]))\n\n(defsc Category [_ _]\n  {:query [:item/id :item/category ]\n   :ident :item/id})\n\n(def categories {:category/services \"Supplies & Services\"\n                 :category/tool \"Tool\"\n                 :category/food \"Food\"\n                 :category/item \"Item\"\n                 :category/other \"Other\"})\n\n(defattr id :item/id :uuid\n         {ao/identity? true\n          ao/schema    :production})\n\n(defattr category :item/category :enum\n         {ao/identities  #{:item/id}\n          ao/enumerated-values (set (keys categories))\n          ao/enumerated-labels categories\n          ao/schema      :production})\n\n(defattr item-name :item/name :string\n         {ao/identities #{:item/id}\n          ao/schema     :production})\n\n(defattr description :item/description :string\n         {ao/identities #{:item/id}\n          ao/schema     :production})\n\n(defattr price :item/price :decimal\n         {ao/identities #{:item/id}\n          ao/schema     :production})\n\n(defattr in-stock :item/in-stock :int\n         {ao/identities #{:item/id}\n          ao/schema     :production})\n\n(defattr all-items :item/all-items :ref\n         {ao/target    :item/id\n          ::pc/output  [{:item/all-items [:item/id]}]\n          ::pc/resolve (fn [{:keys [query-params] :as env} _]\n                         #?(:clj\n                            {:item/all-items (queries/get-all-items env (log/spy :info query-params))}))})\n\n\n(def attributes [id item-name category description price in-stock all-items])\n\n\n"]}