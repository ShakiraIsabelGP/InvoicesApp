{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/enumerated_field.cljc"],"mappings":"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","names":["p__93232","p__93233","map__93234","cljs.core/--destructure-map","cljs.core.get","map__93235","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/enumerated-options","form-instance","env","qualified-key","attribute","map__93236","enumerated-values","enumeration-labels","cljs.core.merge","com.fulcrologic.fulcro.components/component-options","cljs.core.sort_by","cljs.core.mapv","k","com.fulcrologic.rad.options-util/?!","cljs.core/name","p__93237","p__93238","map__93239","map__93240","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/render-to-many","computed-options","com.fulcrologic.rad.form/field-visible?","props","com.fulcrologic.fulcro.components/props","read-only?","com.fulcrologic.rad.form/read-only?","omit-label?","com.fulcrologic.rad.form/omit-label?","options","or__5045__auto__","com.fulcrologic.rad.options_util._QMARK__BANG_","top-class","com.fulcrologic.rad.rendering.semantic-ui.form-options/top-class","selected-ids","cljs.core/set","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.rad.form/field-label","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","cljs.core.map","p__93241","map__93242","text","value","checked?","cljs.core/contains?","selection","cljs.core.conj","cljs.core.disj","com.fulcrologic.rad.form/input-changed!","p__93244","p__93245","map__93246","map__93247","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/render-to-one","required?","invalid?","com.fulcrologic.rad.form/invalid-attribute-value?","user-props","com.fulcrologic.rad.form/field-style-config","com.fulcrologic.fulcro-i18n.i18n/fulcro_tr","cljs.core/first","p1__93243#","cljs.core.filter","cljs.core._EQ_","G__93248","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","cljs.core/not","v","and__5043__auto__","p__93249","map__93250","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/render-field","cardinality"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.enumerated-field\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n         [cljs.reader :refer [read-string]]\n         [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :refer [ui-dropdown]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom :refer [div label input]]])\n    [com.fulcrologic.fulcro-i18n.i18n :refer [tr]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.rendering.semantic-ui.form-options :as sufo]\n    [clojure.string :as str]\n    [com.fulcrologic.rad.form :as form]))\n\n(defn enumerated-options [{::form/keys [form-instance] :as env} {::attr/keys [qualified-key] :as attribute}]\n  (let [{::attr/keys [enumerated-values]} attribute\n        enumeration-labels (merge\n                             (::attr/enumerated-labels attribute)\n                             (comp/component-options form-instance ::form/enumerated-labels qualified-key))]\n    ;; TODO: Sorting should be something users control\n    (sort-by :text\n      (mapv (fn [k]\n              {:text  (?! (get enumeration-labels k (name k)))\n               :value k}) enumerated-values))))\n\n(defn- render-to-many [{::form/keys [form-instance] :as env} {::attr/keys [qualified-key computed-options] :as attribute}]\n  (when (form/field-visible? form-instance attribute)\n    (let [props        (comp/props form-instance)\n          read-only?   (form/read-only? form-instance attribute)\n          omit-label?        (form/omit-label? form-instance attribute)\n          options      (or (?! computed-options env) (enumerated-options env attribute))\n          top-class    (sufo/top-class form-instance attribute)\n          selected-ids (set (get props qualified-key))]\n      (div {:className (or top-class \"ui field\")\n            :key       (str qualified-key)}\n        (when-not omit-label?\n          (label (form/field-label env attribute)))\n        (div :.ui.middle.aligned.celled.list.big {:style {:marginTop \"0\"}}\n          (map (fn [{:keys [text value]}]\n                 (let [checked? (contains? selected-ids value)]\n                   (div :.item {:key value}\n                     (div :.content {}\n                       (div :.ui.toggle.checkbox {:style {:marginTop \"0\"}}\n                         (dom/input\n                           {:type     \"checkbox\"\n                            :checked  checked?\n                            :disabled read-only?\n                            :onChange #(let [selection (if-not checked?\n                                                         (conj (set (or selected-ids #{})) value)\n                                                         (disj selected-ids value))]\n                                         (form/input-changed! env qualified-key selection))})\n                         (dom/label text))))))\n            options))))))\n\n(defn- render-to-one [{::form/keys [form-instance] :as env} {::attr/keys [qualified-key computed-options required?] :as attribute}]\n  (when (form/field-visible? form-instance attribute)\n    (let [props      (comp/props form-instance)\n          read-only? (form/read-only? form-instance attribute)\n          invalid?   (form/invalid-attribute-value? env attribute)\n          omit-label?        (form/omit-label? form-instance attribute)\n          user-props (?! (form/field-style-config env attribute :input/props) env)\n          options    (or (?! computed-options env) (enumerated-options env attribute))\n          top-class  (sufo/top-class form-instance attribute)\n          value      (get props qualified-key)]\n      (div {:className (or top-class \"ui field\")\n            :key       (str qualified-key) :classes [(when invalid? \"error\")]}\n        (when-not omit-label?\n          (label (str (form/field-label env attribute)\n                  (when invalid? (str \" (\" (tr \"Required\") \")\")))))\n        (if read-only?\n          (let [value (first (filter #(= value (:value %)) options))]\n            (dom/input {:readOnly \"readonly\"\n                        :value    (:text value)}))\n          (ui-wrapped-dropdown (merge\n                                 {:options   options\n                                  :clearable (not required?)\n                                  :value     value\n                                  :onChange  (fn [v] (form/input-changed! env qualified-key v))}\n                                 user-props)))\n        (when (and omit-label? invalid?)\n          (dom/div nil (tr \"Required\")))))))\n\n(defn render-field [env {::attr/keys [cardinality] :or {cardinality :one} :as attribute}]\n  (if (= :many cardinality)\n    (render-to-many env attribute)\n    (render-to-one env attribute)))\n"]}