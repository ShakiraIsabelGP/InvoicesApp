{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/text_field.cljc"],"mappings":"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","names":["p__93322","map__93323","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.rad.rendering.semantic-ui.text-field/with-handlers","type","value","onChange","onBlur","props","cljs.core.assoc","or__5045__auto__","evt","G__93324","com.fulcrologic.fulcro.dom.events/target-value","G__93325","com.fulcrologic.rad.rendering.semantic-ui.text-field/text-input","com.fulcrologic.fulcro.dom.macro_create_element","p__93326","map__93327","com.fulcrologic.rad.rendering.semantic-ui.text-field/password-input","options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__93328","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.text-field","js/com.fulcrologic.rad.rendering.semantic-ui.text-field.ViewablePasswordField","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.text-field/ViewablePasswordField","this","_","hidden?","com.fulcrologic.fulcro.components.get_state","com.fulcrologic.fulcro.components.set_state_BANG_","G__93329","G__93330","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-field","com.fulcrologic.rad.rendering.semantic_ui.field.render_field_factory","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-password","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-viewable-password","com.fulcrologic.fulcro.components.factory","p__93331","map__93332","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-dropdown","form-instance","env","attribute","map__93333","k","required?","values","com.fulcrologic.rad.form/field-style-config","input-props","com.fulcrologic.rad.options_util._QMARK__BANG_","options","cljs.core.mapv","v","and__5043__auto__","invalid?","cljs.core/contains?","omit-label?","com.fulcrologic.rad.form/omit-label?","validation-message","com.fulcrologic.rad.form/validation-error-message","field-label","com.fulcrologic.rad.form/field-label","top-class","com.fulcrologic.rad.rendering.semantic-ui.form-options/top-class","read-only?","com.fulcrologic.rad.form/read-only?","G__93334","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","cljs.core.merge","cljs.core/not","com.fulcrologic.rad.form/input-changed!","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-multi-line","p__93335","map__93336","G__93337","G__93338"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.text-field\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    #?(:cljs [com.fulcrologic.fulcro.dom :refer [div label input textarea]]\n       :clj  [com.fulcrologic.fulcro.dom-server :refer [div label input textarea]])\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.rendering.semantic-ui.form-options :as sufo]\n    [com.fulcrologic.rad.rendering.semantic-ui.field :refer [render-field-factory]]))\n\n(defn- with-handlers [type {:keys [value onChange onBlur] :as props}]\n  (assoc props\n    :value (or value \"\")\n    :type type\n    :onBlur (fn [evt]\n              (when onBlur\n                (onBlur (evt/target-value evt))))\n    :onChange (fn [evt]\n                (when onChange\n                  (onChange (evt/target-value evt))))))\n\n(defn- text-input [props] (input (with-handlers \"text\" props)))\n(defn- password-input [{:keys [value onChange onBlur] :as props}] (input (with-handlers \"password\" props)))\n\n(defsc ViewablePasswordField [this {:keys [value onChange onBlur] :as props}]\n  {:initLocalState (fn [_] {:hidden? true})}\n  (let [hidden? (comp/get-state this :hidden?)]\n    (input (assoc props\n             :value (if hidden? \"*******\" (or value \"\"))\n             :type \"text\"\n             :onBlur (fn [evt]\n                       (comp/set-state! this {:hidden? true})\n                       (when onBlur\n                         (onBlur (evt/target-value evt))))\n             :onFocus (fn [_] (comp/set-state! this {:hidden? false}))\n             :onChange (fn [evt]\n                         (when onChange\n                           (onChange (evt/target-value evt))))))))\n\n(def render-field (render-field-factory text-input))\n(def render-password (render-field-factory password-input))\n(def render-viewable-password (render-field-factory (comp/factory ViewablePasswordField)))\n\n(defn render-dropdown [{::form/keys [form-instance] :as env} attribute]\n  (let [{k           ::attr/qualified-key\n         ::attr/keys [required?]} attribute\n        values             (form/field-style-config env attribute :sorted-set/valid-values)\n        input-props        (?! (form/field-style-config env attribute :input/props) env)\n        options            (mapv (fn [v] {:text v :value v}) values)\n        props              (comp/props form-instance)\n        value              (and attribute (get props k))\n        invalid?           (not (contains? values value))\n        omit-label?        (form/omit-label? form-instance attribute)\n        validation-message (when invalid? (form/validation-error-message env attribute))\n        field-label        (form/field-label env attribute)\n        top-class          (sufo/top-class form-instance attribute)\n        read-only?         (form/read-only? form-instance attribute)]\n    (div {:className (or top-class \"ui field\")\n          :key       (str k)}\n      (when-not omit-label?\n        (label field-label (when invalid?\n                             (if (string? validation-message)\n                               (str \" (\" validation-message \")\")\n                               validation-message))))\n      (ui-wrapped-dropdown\n        (merge\n          {:disabled  read-only?\n           :options   options\n           :clearable (not required?)\n           :value     value\n           :onChange  (fn [v] (form/input-changed! env k v))}\n          input-props))\n      (when (and omit-label? invalid?)\n        (div nil validation-message)))))\n\n(def render-multi-line\n  (render-field-factory (fn [{:keys [value onChange onBlur] :as props}]\n                          (textarea (assoc props\n                                      :value (or value \"\")\n                                      :onBlur (fn [evt]\n                                                (when onBlur\n                                                  (onBlur (evt/target-value evt))))\n                                      :onChange (fn [evt]\n                                                  (when onChange\n                                                    (onChange (evt/target-value evt)))))))))\n"]}