{
"version":3,
"file":"module$node_modules$big_DOT_js$big.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/big_DOT_js/big.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$big_DOT_js$big\"] = function(global,require,module,exports) {\n/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true && typeof n !== 'bigint') {\r\n            throw TypeError(INVALID + 'value');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n        rm === 1 && xc[0] >= 5 ||\r\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n      );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[--sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (sd === 0) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n  \r\n  \r\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\r\n  P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","GLOBAL","_Big_","Big","n","x","UNDEFINED","s","e","c","slice","strict","TypeError","String","i","NUMERIC","test","Error","charAt","indexOf","replace","search","substring","length","nl","constructor","prototype","P","DP","RM","NE","PE","STRICT","roundDown","roundHalfUp","roundHalfEven","roundUp","round","sd","rm","more","xc","INVALID_RM","unshift","pop","stringify","doExponential","isNonzero","join","abs","P.abs","cmp","P.cmp","y","yc","j","k","l","isneg","div","P.div","a","b","dp","MAX_DP","INVALID_DP","DIV_BY_ZERO","bl","bz","ai","al","r","rl","q","qc","qi","p","push","ri","bt","shift","eq","P.eq","gt","P.gt","gte","P.gte","lt","P.lt","lte","P.lte","minus","sub","P.sub","plus","xe","ye","xlty","t","reverse","mod","P.mod","ygtx","times","neg","P.neg","add","P.add","pow","P.pow","one","MAX_POWER","prec","P.prec","P.round","sqrt","P.sqrt","half","Math","toExponential","mul","P.mul","Array","P.toExponential","toFixed","P.toFixed","toJSON","toString","P.toString","toNumber","P.toNumber","Number","toPrecision","P.toPrecision","valueOf","P.valueOf","define","amd"]
}
