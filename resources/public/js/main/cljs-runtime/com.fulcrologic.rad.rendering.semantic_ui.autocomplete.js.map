{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/autocomplete.cljc"],"mappings":"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","names":["options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete.AutocompleteQuery","com.fulcrologic.fulcro.components/react-constructor","cljs.core.get","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/AutocompleteQuery","_","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/to-js","v","cljs.core/clj->js","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/normalize-options","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__93264","cljs.core/--destructure-map","p__93265","map__93266","*after-render*-orig-val__93267","com.fulcrologic.fulcro.raw.components/*after-render*","*after-render*-temp-val__93268","env","*after-render*-orig-val__93271","*after-render*-temp-val__93272","temp__5804__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","source","target","state","options","cljs.core/deref","normalized-options","cljs.core.apply","cljs.core/array","cljs.core.map","p__93269","map__93270","text","value","cljs.core.pr_str","cljs.core.swap_BANG_","s__78955__auto__","cljs.core.dissoc","cljs.core/assoc-in","props","map__93276","map__93277","com.fulcrologic.fulcro.components/get-computed","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete.AutocompleteField","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/AutocompleteField","this","search-string","label","onChange","invalid?","validation-message","className","omit-label?","read-only?","map__93273","debounce-ms","com.fulcrologic.rad.options-util/debounce","s","map__93274","id","search-key","com.fulcrologic.fulcro.data_fetch.load_BANG_","or__5045__auto__","map__93275","preload?","and__5043__auto__","load!","com.fulcrologic.fulcro.components.get_state","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.rad.rendering.semantic_ui.autocomplete.goog$module$goog$object.getValueByKeys","com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown/ui-dropdown","query","com.fulcrologic.fulcro.components/isoget","G__93278","G__93279","cljs.reader.read_string","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/ui-autocomplete-field","com.fulcrologic.fulcro.components.computed_factory","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/gc-autocomplete","map__93280","p__93281","map__93282","*after-render*-orig-val__93283","*after-render*-temp-val__93284","*after-render*-orig-val__93285","*after-render*-temp-val__93286","com.fulcrologic.fulcro.algorithms.normalized-state/remove-entity","params","com.fulcrologic.fulcro.components/make-state-map","map__93291","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete.AutocompleteFieldRoot","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/AutocompleteFieldRoot","attribute","com.fulcrologic.rad.ids.new_uuid","map__93287","map__93288","map__93289","form-instance","minimum-input","com.fulcrologic.rad.form_options.get_field_options","com.fulcrologic.fulcro.components/component-options","com.fulcrologic.fulcro.algorithms.merge/merge-component!","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_","com.fulcrologic.fulcro.components.transact_BANG_","G__93290","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_","map__93292","map__93293","k","top-class","com.fulcrologic.rad.rendering.semantic-ui.form-options/top-class","com.fulcrologic.rad.form/field-label","com.fulcrologic.rad.form/read-only?","com.fulcrologic.rad.form/omit-label?","com.fulcrologic.rad.form/invalid-attribute-value?","com.fulcrologic.rad.form/validation-error-message","field","cljs.core.get_in","G__93294","G__93295","cljs.core.assoc","G__93296","normalized-value","com.fulcrologic.rad.form/input-changed!","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/ui-autocomplete-field-root","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory","p__93297","map__93298","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/render-autocomplete-field","cardinality","cljs.core._EQ_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","G__93299"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.autocomplete\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n         [goog.object :as gobj]\n         [cljs.reader :refer [read-string]]\n         [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :refer [ui-dropdown]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom :refer [div label input]]])\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.algorithms.normalized-state :as fns]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :as mroot]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.form-options :as fo]\n    [com.fulcrologic.rad.ids :as ids]\n    [com.fulcrologic.rad.options-util :as opts]\n    [com.fulcrologic.rad.rendering.semantic-ui.form-options :as sufo]\n    [taoensso.timbre :as log]))\n\n(defsc AutocompleteQuery [_ _] {:query [:text :value]})\n\n(defn to-js [v]\n  #?(:clj  v\n     :cljs (clj->js v)))\n\n(defmutation normalize-options [{:keys [source target]}]\n  (action [{:keys [state]}]\n    #?(:clj true\n       :cljs\n       (let [options            (get @state source)\n             normalized-options (apply array\n                                  (map (fn [{:keys [text value]}]\n                                         #js {:text text :value (pr-str value)}) options))]\n         (fns/swap!-> state\n           (dissoc source)\n           (assoc-in target normalized-options))))))\n\n(defsc AutocompleteField [this {:ui/keys [search-string options] :as props} {:keys [value label onChange\n                                                                                    invalid? validation-message\n                                                                                    className omit-label?\n                                                                                    read-only?]}]\n  {:initLocalState    (fn [this]\n                        ;; Possible problem???: props not making it...fix that, or debounce isn't configurable.\n                        (let [{:autocomplete/keys [debounce-ms]} (comp/props this)]\n                          {:load! (opts/debounce\n                                    (fn [s]\n                                      (let [{id                 ::autocomplete-id\n                                             :autocomplete/keys [search-key]} (comp/props this)]\n                                        (df/load! this search-key AutocompleteQuery\n                                          {:params               {:search-string s}\n                                           :post-mutation        `normalize-options\n                                           :post-mutation-params {:source search-key\n                                                                  :target [::autocomplete-id id :ui/options]}})))\n                                    (or debounce-ms 200))}))\n   :componentDidMount (fn [this]\n                        (let [{id                 ::autocomplete-id\n                               :autocomplete/keys [search-key preload?]} (comp/props this)\n                              value (comp/get-computed this :value)]\n                          (cond\n                            preload? (df/load! this search-key AutocompleteQuery\n                                       {:post-mutation        `normalize-options\n                                        :post-mutation-params {:source search-key\n                                                               :target [::autocomplete-id id :ui/options]}})\n                            (and search-key value) (df/load! this search-key AutocompleteQuery\n                                                     {:params               {:only value}\n                                                      :post-mutation        `normalize-options\n                                                      :post-mutation-params {:source search-key\n                                                                             :target [::autocomplete-id id :ui/options]}}))))\n   :query             [::autocomplete-id :ui/search-string :ui/options :autocomplete/search-key\n                       :autocomplete/debounce-ms :autocomplete/minimum-input]\n   :ident             ::autocomplete-id}\n  (let [load! (comp/get-state this :load!)]\n    #?(:clj\n       (dom/div \"\")\n       :cljs\n       (dom/div :.field {:className (or className \"field\")\n                         :classes   [(when invalid? \"error\")]}\n         (when-not omit-label?\n           (dom/label label (when invalid? (dom/span \" \" validation-message))))\n         (if read-only?\n           (gobj/getValueByKeys options 0 \"text\")\n           (ui-dropdown #js {:search             true\n                             :options            (if options options #js [])\n                             :value              (pr-str value)\n                             :selection          true\n                             :closeOnBlur        true\n                             :openOnFocus        true\n                             :selectOnBlur       true\n                             :selectOnNavigation true\n                             :onSearchChange     (fn [_ v]\n                                                   (let [query (comp/isoget v \"searchQuery\")]\n                                                     (load! query)))\n                             :onChange           (fn [_ v]\n                                                   (when onChange\n                                                     (onChange (some-> (comp/isoget v \"value\")\n                                                                 read-string))))}))\n         (when (and invalid? omit-label?)\n           (dom/div :.red validation-message))))))\n\n(def ui-autocomplete-field (comp/computed-factory AutocompleteField {:keyfn ::autocomplete-id}))\n\n(defmutation gc-autocomplete [{:keys [id]}]\n  (action [{:keys [state]}]\n    (when id\n      (swap! state fns/remove-entity [::autocomplete-id id]))))\n\n(defsc AutocompleteFieldRoot [this props {:keys [env attribute]}]\n  {:initLocalState        (fn [this] {:field-id (ids/new-uuid)})\n   :componentDidMount     (fn [this]\n                            (let [id (comp/get-state this :field-id)\n                                  {:keys [env attribute]} (comp/get-computed this)\n                                  {::form/keys [form-instance]} env\n                                  {:autocomplete/keys [search-key debounce-ms minimum-input]} (fo/get-field-options (comp/component-options form-instance) attribute)]\n                              (merge/merge-component! this AutocompleteField {::autocomplete-id           id\n                                                                              :autocomplete/search-key    search-key\n                                                                              :autocomplete/debounce-ms   debounce-ms\n                                                                              :autocomplete/minimum-input minimum-input\n                                                                              :ui/search-string           \"\"\n                                                                              :ui/options                 #js []}))\n                            (mroot/register-root! this {:initialize? true}))\n   :shouldComponentUpdate (fn [_ _] true)\n   :initial-state         {::autocomplete-id {}}\n   :componentWillUnmount  (fn [this]\n                            (comp/transact! this [(gc-autocomplete {:id (comp/get-state this :field-id)})])\n                            (mroot/deregister-root! this))\n   :query                 [::autocomplete-id]}\n  (let [{:autocomplete/keys [debounce-ms search-key preload?]} (fo/get-field-options (comp/component-options this) attribute)\n        k                  (::attr/qualified-key attribute)\n        {::form/keys [form-instance]} env\n        top-class          (sufo/top-class form-instance attribute)\n        value              (-> (comp/props form-instance) (get k))\n        id                 (comp/get-state this :field-id)\n        label              (form/field-label env attribute)\n        read-only?         (form/read-only? form-instance attribute)\n        omit-label?        (form/omit-label? form-instance attribute)\n        invalid?           (form/invalid-attribute-value? env attribute)\n        validation-message (when invalid? (form/validation-error-message env attribute))\n        field              (get-in props [::autocomplete-id id])]\n    ;; Have to pass the id and debounce early since the merge in mount won't happen until after, which is too late for initial\n    ;; state\n    (ui-autocomplete-field (assoc field\n                             ::autocomplete-id id\n                             :autocomplete/search-key search-key\n                             :autocomplete/preload? preload?\n                             :autocomplete/debounce-ms debounce-ms)\n      (cond-> {:value              value\n               :invalid?           invalid?\n               :validation-message validation-message\n               :label              label\n               :read-only?         read-only?\n               :omit-label?        omit-label?\n               :onChange           (fn [normalized-value]\n                                     #?(:cljs\n                                        (when normalized-value (form/input-changed! env k normalized-value))))}\n        top-class (assoc :className top-class)))))\n\n(def ui-autocomplete-field-root (mroot/floating-root-factory AutocompleteFieldRoot\n                                  {:keyfn (fn [props] (-> props :attribute ::attr/qualified-key))}))\n\n(defn render-autocomplete-field [env {::attr/keys [cardinality] :or {cardinality :one} :as attribute}]\n  (if (= :many cardinality)\n    (log/error \"Cannot autocomplete to-many attributes with renderer\" `render-autocomplete-field)\n    (ui-autocomplete-field-root {:env env :attribute attribute})))\n\n"]}