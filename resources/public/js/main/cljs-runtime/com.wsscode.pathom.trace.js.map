{"version":3,"sources":["com/wsscode/pathom/trace.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/string?","cljs.core/nat-int?","cljs.core/map?","cljs.spec.alpha/map-spec-impl","G__54557","cljs.spec.alpha.every_impl","G__54558","cljs.core/vector?","cljs.core/any?","com.wsscode.pathom.trace/now","cljs.core/inst-ms","js/Date","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/nilable-impl","map__54563","cljs.core/--destructure-map","retspec54560","cljs.core.get","argspec54559","com.fulcrologic.guardrails.core/run-check","f54562","temp__5802__auto__","ret54561","com.wsscode.pathom.trace/trace","env","event","event-trace","cljs.core.swap_BANG_","cljs.core/conj","cljs.core.assoc","var_args","G__54565","com.wsscode.pathom.trace/trace-enter","js/Error","id","cljs.core.gensym","trace-id","G__54567","com.wsscode.pathom.trace/trace-leave","com.wsscode.pathom.trace/live-trace!","trace-atom","cljs.core/add-watch","_","n","evt","cljs.core/peek","cljs.core.print","cljs.core.pr_str","cljs.core.dissoc","com.wsscode.pathom.trace/compute-durations","trace","leave-items","cljs.core.into","cljs.core.comp","cljs.core.filter","p1__54570#","cljs.core._EQ_","cljs.core.map","cljs.core.juxt","cljs.core/identity","initial-time","cljs.core/first","cljs.core.remove","e","p__54571","map__54572","timestamp","map__54573","et","leave","cljs.core.merge","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.trace","js/com.wsscode.pathom.trace.trace-tree-collect","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__54574","cljs.core/MultiFn","cljs.core.symbol","com.wsscode.pathom.trace/trace-tree-collect","_x","row","x","com.wsscode.pathom.trace/tree-assoc-detail","keys","cljs.core.update_in","cljs.core.fnil","cljs.core/select-keys","com.wsscode.pathom.trace/trace-style","style","p__54575","map__54576","com.wsscode.pathom.trace/tree-assoc-key-detail","key","com.wsscode.pathom.trace/trace->tree*","paths","path","cljs.core.reduce","p__54578","map__54579","relative-timestamp","G__54580","cljs.core/Keyword","p1__54577#","cljs.core.update","next-path","cljs.core.conj","cljs.core/contains?","cljs.core/assoc-in","count","i","cljs.core.range","cljs.core/keys","cljs.core/assoc","cljs.core.get_in","com.wsscode.pathom.trace/trace->tree","cljs.core/group-by","com.wsscode.pathom.trace/compute-details-duration","res","p1__54581#","cljs.core/vec","cljs.core.sort_by","last-detail","last-ts","p1__54582#","x__5130__auto__","y__5131__auto__","or__5045__auto__","com.wsscode.pathom.trace/normalize-tree-details","trace-tree","clojure.walk/postwalk","G__54583","p__54584","map__54585","com.wsscode.pathom.trace/compute-d3-tree","duration","children","details","G__54586","cljs.core.mapv","p__54587","map__54588","p__54589","vec__54590","cljs.core.nth","k","v","cljs.core.keyword","cljs.core/name","cljs.core/second","com.wsscode.pathom.trace/trace->viz","com.wsscode.pathom.trace/wrap-parser-trace","parser","tx","cljs.core/some","trace*","env'","parser-trace","com.wsscode.pathom.trace.trace_enter","res__53579__auto__","com.wsscode.async.async-cljs/chan?","c__42152__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__42153__auto__","switch__42120__auto__","state_54617","state_val_54618","statearr-54619","statearr-54620","cljs.core/cons","cljs.core.async.impl.ioc-helpers/take!","inst_54615","cljs.core.async.impl.ioc-helpers/return-chan","inst_54593","statearr-54622","statearr-54623","cljs.core/rest","ex54621","statearr-54624","statearr-54625","inst_54600","inst_54601","com.wsscode.async.async-cljs/throw-err","inst_54602","inst_54603","inst_54604","cljs.core/PersistentHashMap","inst_54605","inst_54606","inst_54607","inst_54608","inst_54609","inst_54610","cljs.core/deref","inst_54611","inst_54612","statearr-54626","statearr-54627","statearr-54628","statearr-54629","state-machine__42121__auto__","ret-value__42122__auto__","result__42123__auto__","cljs.core/keyword-identical?","ex__42124__auto__","e54630","statearr-54631","cljs.core/seq","statearr-54632","state__42154__auto__","statearr-54633","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","com.wsscode.pathom.trace.trace_leave","com.wsscode.pathom.trace/trace-plugin","_env"],"sourcesContent":["(ns com.wsscode.pathom.trace\n  (:require\n    [clojure.spec.alpha :as s]\n    [clojure.walk :as walk]\n    [com.fulcrologic.guardrails.core :refer [>def >defn >fdef => | <- ?]]\n    [#?(:clj  com.wsscode.async.async-clj\n        :cljs com.wsscode.async.async-cljs)\n     :refer [let-chan]])\n  #?(:cljs\n     (:require-macros\n       [com.wsscode.pathom.trace])))\n\n(>def ::event keyword?)\n(>def ::label string?)\n(>def ::direction #{::enter ::leave})\n(>def ::timestamp nat-int?)\n(>def ::relative-timestamp nat-int?)\n(>def ::duration nat-int?)\n(>def ::style \"Map with CSS styles to apply in the trace bar.\" map?)\n(>def ::event-entry (s/keys :opt [::event ::label ::style]))\n(>def ::details (s/coll-of ::event-entry :kind vector?))\n(>def ::trace* \"Atom with ::details.\" any?)\n\n(defn now []\n  #?(:clj  (System/currentTimeMillis)\n     :cljs (inst-ms (js/Date.))))\n\n(>defn trace [env event]\n  [map? ::event-entry\n   => (? ::details)]\n  (if-let [event-trace (get env ::trace*)]\n    (swap! event-trace conj\n      (assoc event\n        :com.wsscode.pathom.core/path (:com.wsscode.pathom.core/path env [])\n        ::timestamp (now)))))\n\n(defn trace-enter\n  ([env event]\n   (let [id (gensym \"pathom-trace-\")]\n     (trace env (assoc event ::direction ::enter ::id id))\n     id))\n  ([env event trace-id]\n   (trace env (assoc event ::direction ::enter ::id trace-id))\n   trace-id))\n\n(defn trace-leave\n  ([env trace-id]\n   (trace env {::direction ::leave ::id trace-id}))\n  ([env trace-id event]\n   (trace env (assoc event ::direction ::leave ::id trace-id))\n   trace-id))\n\n#?(:clj\n   (defmacro tracing [env event & body]\n     `(if (get ~env ::trace*)\n        (let [trace-id# (trace-enter ~env ~event)\n              res#      (do ~@body)]\n          (trace-leave ~env trace-id# ~event)\n          res#)\n        (do ~@body))))\n\n(defn live-trace! [trace-atom]\n  (add-watch trace-atom :live\n    (fn [_ _ _ n]\n      (let [evt (peek n)]\n        (print (str (pr-str [(::event evt) (dissoc evt ::event)]) \"\\n\"))))))\n\n(defn compute-durations [trace]\n  (let [leave-items  (into {} (comp (filter (comp #(= ::leave %) ::direction))\n                                    (map (juxt ::id identity)))\n                           trace)\n\n        initial-time (::timestamp (first trace))]\n\n    (into []\n          (comp (remove (fn [e] e (= ::leave (::direction e))))\n                (map (fn [{::keys [id timestamp] :as e}]\n                       (let [e (assoc e ::relative-timestamp (- timestamp initial-time))]\n                         (if-let [{et ::timestamp :as leave} (get leave-items id)]\n                           (-> e\n                               (assoc\n                                 ::timestamp-leave et\n                                 ::duration (- et timestamp))\n                               (merge (dissoc leave ::timestamp))\n                               (dissoc ::id ::direction))\n                           e)))))\n          trace)))\n\n(defmulti trace-tree-collect (fn [_x row] (::event row)))\n\n(defmethod trace-tree-collect :default [x _] x)\n\n(defn tree-assoc-detail [row x keys]\n  (update-in x [:response ::details] (fnil conj [])\n    (select-keys row (into [::event ::label ::relative-timestamp ::duration ::style] keys))))\n\n(defn trace-style [row style]\n  (assoc row ::style style))\n\n(defn tree-assoc-key-detail [{:keys [key] :as row} x keys]\n  (update-in x [:response ::children key ::details] (fnil conj [])\n    (select-keys row (into [::event ::label ::relative-timestamp ::duration ::style] keys))))\n\n(defn trace->tree* [paths path]\n  (-> (reduce\n        (fn [x {::keys [event relative-timestamp]\n                :keys  [key]\n                :as    row}]\n          (case event\n            (:com.wsscode.pathom.core/trace-plugin\n              :com.wsscode.pathom.parser/parse-loop)\n            (update x :response #(merge (select-keys row [::duration\n                                                          ::relative-timestamp\n                                                          :com.wsscode.pathom.core/path]) %))\n\n            :com.wsscode.pathom.parser/process-key\n            (let [next-path (conj path key)]\n              (if (contains? (:visited x) next-path)\n                x\n                (-> x\n                    (assoc-in [:response :com.wsscode.pathom.core/path] path)\n                    (assoc-in [:response ::children key]\n                      (-> (merge (trace->tree* paths next-path) (select-keys row [:key\n                                                                                  ::relative-timestamp]))\n                          (assoc :com.wsscode.pathom.core/path next-path)))\n                    (update :visited conj next-path))))\n\n            :com.wsscode.pathom.core/join-seq\n            (let [count (:com.wsscode.pathom.core/seq-count row)]\n              (reduce\n                (fn [x i]\n                  (let [next-path (conj path i)]\n                    (assoc-in x [:response ::children i]\n                      (-> (merge (trace->tree* paths next-path) (select-keys row [:key\n                                                                                  ::relative-timestamp]) {:key i})\n                          (assoc :com.wsscode.pathom.core/path next-path)))))\n                x\n                (range count)))\n\n            (:com.wsscode.pathom.parser/async-return\n              :com.wsscode.pathom.parser/call-read\n              :com.wsscode.pathom.parser/external-wait-key\n              :com.wsscode.pathom.parser/skip-resolved-key\n              :com.wsscode.pathom.parser/skip-wait-key)\n            (update-in x [:response ::children key ::details] (fnil conj [])\n              (select-keys row [:key\n                                ::event\n                                ::label\n                                ::style\n                                ::relative-timestamp]))\n\n            (:com.wsscode.pathom.parser/trigger-reader-retry\n              :com.wsscode.pathom.parser/trigger-recheck-schedule)\n            (update-in x [:response ::details] (fnil conj [])\n              (select-keys row [:key\n                                ::event\n                                ::label\n                                ::relative-timestamp\n                                ::style\n                                :com.wsscode.pathom.parser/processing]))\n\n            :com.wsscode.pathom.parser/max-iterations-reached\n            (update-in x [:response ::children key ::details] (fnil conj [])\n              (select-keys row [::event\n                                ::label\n                                ::style\n                                ::relative-timestamp\n                                :com.wsscode.pathom.parser/max-key-iterations]))\n\n            (::trace-done\n              :com.wsscode.pathom.parser/flush-watchers-loop\n              :com.wsscode.pathom.parser/process-pending\n              :com.wsscode.pathom.parser/reset-loop)\n            (update-in x [:response ::details] (fnil conj [])\n              (select-keys row [::event\n                                ::label\n                                ::relative-timestamp\n                                ::style\n                                :com.wsscode.pathom.parser/loop-keys\n                                :com.wsscode.pathom.parser/merge-result?\n                                :com.wsscode.pathom.parser/provides]))\n\n            :com.wsscode.pathom.parser/merge-result\n            (reduce\n              (fn [x key]\n                (update-in x [:response ::children key ::details] (fnil conj [])\n                  (select-keys row [::event\n                                    ::label\n                                    ::relative-timestamp\n                                    ::style])))\n              x\n              (keys (:com.wsscode.pathom.parser/response-value row)))\n\n            (:com.wsscode.pathom.connect/batch-items-ready\n              :com.wsscode.pathom.connect/batch-result-error\n              :com.wsscode.pathom.connect/batch-result-ready\n              :com.wsscode.pathom.connect/call-resolver\n              :com.wsscode.pathom.connect/call-resolver-batch\n              :com.wsscode.pathom.connect/call-resolver-with-cache\n              :com.wsscode.pathom.connect/compute-plan\n\n              :com.wsscode.pathom.connect/reader3-enter\n              :com.wsscode.pathom.connect/reader3-entity-shape\n              :com.wsscode.pathom.connect/reader3-prepare-ast\n              :com.wsscode.pathom.connect/reader3-execute\n\n              :com.wsscode.pathom.connect/invalid-resolve-response\n              :com.wsscode.pathom.connect/merge-resolver-response\n              :com.wsscode.pathom.connect/resolver-error\n              :com.wsscode.pathom.connect/schedule-resolver\n              :com.wsscode.pathom.connect/waiting-resolver\n              :com.wsscode.pathom.core/parallel-sequence-loop\n              :com.wsscode.pathom.parser/watch-pending-timeout)\n            (update-in x [:response ::details] (fnil conj [])\n              (select-keys row [:key\n                                ::duration\n                                ::event\n                                ::label\n                                ::relative-timestamp\n                                ::style\n                                :com.wsscode.pathom.connect/input-data\n                                :com.wsscode.pathom.connect/items-count\n                                :com.wsscode.pathom.connect/plan\n                                :com.wsscode.pathom.connect/sym\n                                :com.wsscode.pathom.connect/waiting-key\n                                :com.wsscode.pathom.core/error\n                                :com.wsscode.pathom.parser/external-wait-ignore-timeout\n                                :com.wsscode.pathom.parser/provides]))\n\n            :com.wsscode.pathom.parser/value-return\n            (-> x\n                (update-in [:response ::children key ::details] (fnil conj [])\n                  (select-keys row [::event\n                                    ::label\n                                    ::relative-timestamp\n                                    ::style]))\n                (update-in [:response ::children key] assoc ::duration (- relative-timestamp (get-in x [:response ::children key ::relative-timestamp]))))\n\n            (trace-tree-collect x row)))\n        {:visited  #{}\n         :response {}}\n        (get paths path))\n      :response))\n\n(defn trace->tree [trace]\n  (let [paths (->> trace compute-durations (group-by :com.wsscode.pathom.core/path))]\n    (trace->tree* paths [])))\n\n(defn compute-details-duration [x]\n  (let [res         (update x ::details #(vec (sort-by ::relative-timestamp %)))\n        last-detail (peek (::details res))\n        last-ts     (+ (::duration last-detail 0) (::relative-timestamp last-detail 0))]\n    (update res ::duration #(max (or % 0) (- last-ts (::relative-timestamp res 0))))))\n\n(defn normalize-tree-details [trace-tree]\n  (walk/postwalk\n    (fn [x]\n      (cond-> x\n        (and (map? x) (contains? x ::details))\n        (compute-details-duration)))\n    trace-tree))\n\n(defn compute-d3-tree [{::keys                        [relative-timestamp duration children details]\n                        :com.wsscode.pathom.core/keys [path]\n                        :keys                         [key]}]\n  (cond-> {:start    relative-timestamp\n           :path     path\n           :duration (or duration 0)\n           :details  (mapv (fn [{::keys [relative-timestamp duration event]\n                                 :as    row}]\n                             (let [details (->> (dissoc row ::relative-timestamp ::timestamp ::duration ::event)\n                                                (into {} (map (fn [[k v]] [(keyword (name k)) v]))))]\n                               (merge {:event    (name event)\n                                       :duration (or duration 0)\n                                       :start    relative-timestamp}\n                                      details)))\n                       details)}\n    key (assoc :name (str key))\n    children (assoc :children\n               (into [] (map (comp compute-d3-tree second) children)))))\n\n(defn trace->viz [trace]\n  (-> trace trace->tree normalize-tree-details compute-d3-tree\n      (assoc :hint \"Query\")))\n\n(defn wrap-parser-trace [parser]\n  (fn wrap-parser-trace-internal [env tx]\n    (if (some #{:com.wsscode.pathom/trace} tx)\n      (let [trace*       (or (::trace* env) (atom []))\n            env'         (assoc env ::trace* trace*)\n            parser-trace (trace-enter env' {::event ::trace-plugin})]\n        (let-chan [res (parser env' tx)]\n          (trace-leave env' parser-trace {::event ::trace-plugin})\n          (trace env' {::event ::trace-done})\n          (assoc res :com.wsscode.pathom/trace (trace->viz @trace*))))\n      (parser env tx))))\n\n(def trace-plugin\n  {:com.wsscode.pathom.core/wrap-parser\n   wrap-parser-trace\n\n   :com.wsscode.pathom.connect/register\n   [{:com.wsscode.pathom.connect/sym     `trace\n     :com.wsscode.pathom.connect/output  [:com.wsscode.pathom/trace]\n     :com.wsscode.pathom.connect/resolve (fn [_env _] {:com.wsscode.pathom/trace nil})}]})\n"]}