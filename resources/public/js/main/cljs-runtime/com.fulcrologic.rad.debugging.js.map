{"version":3,"sources":["com/fulcrologic/rad/debugging.cljc"],"mappings":"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","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.debugging","js/com.fulcrologic.rad.debugging.form-info-plugins","com.fulcrologic.rad.debugging/form-info-plugins","cljs.core.atom","com.fulcrologic.rad.debugging/add-form-info-plugin!","k","plugin","cljs.core.swap_BANG_","cljs.core/assoc","com.fulcrologic.rad.debugging/remove-form-info-plugin!","cljs.core/dissoc","com.fulcrologic.rad.debugging/eiframe","js-props","vec__91672","cljs.core.nth","ref","set-content-ref!","com.fulcrologic.fulcro.react.hooks/use-state","head-children","body-children","props","cljs.core.assoc","head-node","G__91675","body-node","G__91676","com.fulcrologic.fulcro.dom.create_element","cljs.core/clj->js","js/module$node_modules$react_dom$index.createPortal","com.fulcrologic.rad.debugging/ui-embedded-iframe","com.fulcrologic.rad.debugging/ident->on-screen-forms","app-ish","ident","on-screen-components","com.fulcrologic.fulcro.components/ident->components","forms","p1__91677#","cljs.core.filter","com.fulcrologic.fulcro.components/component-options","js/com.fulcrologic.rad.debugging.FormDiffViewer","js-props__50841__auto__","render__50842__auto__","vec__91678","com.fulcrologic.fulcro.components/use-fulcro","this__50843__auto__","props__50844__auto__","com.fulcrologic.fulcro.components/add-hook-options!","com.fulcrologic.fulcro.components/wrapped-render","*app*-orig-val__91681","com.fulcrologic.fulcro.components/*app*","*shared*-orig-val__91682","com.fulcrologic.fulcro.components/*shared*","*parent*-orig-val__91683","com.fulcrologic.fulcro.components/*parent*","*app*-temp-val__91684","or__5045__auto__","G__91687","G__91688","com.fulcrologic.fulcro.components/isoget-in","*shared*-temp-val__91685","com.fulcrologic.fulcro.components.shared","G__91689","G__91690","*parent*-temp-val__91686","com.fulcrologic.rad.debugging/FormDiffViewer","this","diff","com.fulcrologic.fulcro.algorithms.form_state.dirty_fields","v","val","com.fulcrologic.fulcro.dom/macro-create-element*","cljs.core/empty?","com.fulcrologic.fulcro.components/force-children","iter__5523__auto__","s__91692","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__91694","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__91696","cljs.core/chunk-buffer","i__91695","cljs.core/-nth","map__91697","cljs.core/--destructure-map","cljs.core.get","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__91693","cljs.core/chunk-rest","map__91698","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__91691","cljs.core/keys","fields","cljs.core.sort","rowspan","first-field","field","before","after","cljs.core.get_in","com.fulcrologic.fulcro.dom.macro_create_element","cljs.core._EQ_","com.fulcrologic.rad.debugging/ui-form-diff-viewer","com.fulcrologic.fulcro.components.computed_factory","cprops","com.fulcrologic.rad.debugging/form-attributes","form","form-options","base-attributes","com.fulcrologic.rad.form-options/attributes","subform-map","com.fulcrologic.rad.form/subform-options","subforms","cljs.core.mapv","com.fulcrologic.rad.form-options/ui","cljs.core/vals","cljs.core.into","p1__91699#","cljs.core.mapcat","options__50845__auto__","com.fulcrologic.fulcro.components/props","map__91700","com.fulcrologic.fulcro.components/get-computed","js/com.fulcrologic.rad.debugging.RADAttributeInfo","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.debugging/RADAttributeInfo","form-instance","all-attributes","s__91702","b__91704","i__91703","map__91705","iter__91701","map__91708","qualified-key","required?","type","valid?","schema","target","style","attr","cljs.core.sort_by","com.fulcrologic.rad.attributes-options/qualified-key","type-description","G__91707","G__91710","cljs.core/name","card","com.fulcrologic.rad.attributes/to-many?","valid","cljs.core/fn?","com.fulcrologic.rad.debugging/ui-rad-attribute-info","js/com.fulcrologic.rad.debugging.FormInfo","vec__91714","*app*-orig-val__91717","*shared*-orig-val__91718","*parent*-orig-val__91719","*app*-temp-val__91720","G__91723","G__91724","*shared*-temp-val__91721","G__91725","G__91726","*parent*-temp-val__91722","map__91727","com.fulcrologic.rad.debugging/FormInfo","form-props","validator","relation","visited","map__91728","vec__91729","id","pristine-state","complete?","state-map","com.fulcrologic.fulcro.application/current-state","key->attribute","open-segments","set-open-segments!","cljs.core.sorted_set","expanded?","cljs.core/contains?","toggle!","G__91732","cljs.core.disj","cljs.core.conj","com.fulcrologic.fulcro.components/component-name","com.fulcrologic.fulcro.components.fragment","cljs.core.map_indexed","idx","p1__91713#","subform?","valid-ident?","cljs.core/vector?","cljs.core/Keyword","cljs.core/second","current-value","pristine-refs","expected-to-many?","G__91733","to-many?","cljs.core/boolean","cljs.core/every?","bad-cardinality?","cljs.core/boolean?","cljs.core.not_EQ_","bad-idents?","refs","and__5043__auto__","current-error?","pristine-error?","validation-code","invalid?","G__91734","s__91736","s__91738","b__91740","i__91739","iter__91737","iter__91735","subform","value","cljs.core/map?","subform-props","com.fulcrologic.fulcro.components/ident->any","cljs.core/hash","G__91741","G__91742","G__91743","G__91744","com.fulcrologic.rad.debugging/ui-form-info","cljs.core.update","cljs.core/conj","s__91746","b__91748","i__91747","map__91749","iter__91745","map__91750","plugin-key","cljs.core/deref","title","render","map__91751","js/com.fulcrologic.rad.debugging.FormDebugContainer","com.fulcrologic.rad.debugging/FormDebugContainer","width","height","options","com.fulcrologic.rad.debugging/ui-form-debug-container","com.fulcrologic.fulcro.components.factory","com.fulcrologic.rad.debugging/debugger","com.fulcrologic.rad.form-options/validator","G__91752","var_args","G__91754","com.fulcrologic.rad.debugging/top-bottom-debugger","js/Error","G__91755","com.fulcrologic.fulcro.react.error-boundaries/ui-error-boundary","G__91756","G__91757","com.fulcrologic.rad.form/render-layout","G__91758","G__91759","G__91760","G__91762","com.fulcrologic.rad.debugging/side-by-side-debugger","G__91763","G__91764","G__91765","G__91766","G__91767","G__91768","cljs.core/chunk-first"],"sourcesContent":["(ns com.fulcrologic.rad.debugging\n  \"A ns containing helpers for debugging live components\"\n  (:require\n    [clojure.string :as str]\n    #?@(:clj  [[com.fulcrologic.fulcro.dom-server :as dom :refer [div label input h2 table thead tr tbody td th]]]\n        :cljs [[\"react-dom\" :refer [createPortal]]\n               [com.fulcrologic.fulcro.dom :as dom :refer [div label input h2 table thead tr tbody td th]]])\n    [com.fulcrologic.fulcro.algorithms.denormalize :refer [db->tree]]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.raw.components :as rc]\n    [com.fulcrologic.fulcro.react.hooks :as hooks]\n    [com.fulcrologic.fulcro.react.error-boundaries :refer [error-boundary]]\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [com.fulcrologic.rad.form-options :as fo]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.form :as form]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.rad.attributes-options :as ao]))\n\n(defonce ^:private form-info-plugins (atom {}))\n\n(defn add-form-info-plugin!\n  \"Add a plugin to the form info section of the form debugger. `k` is a keyword, and plugin is a map:\n\n  ```\n  {:title (fn [ form-props extra] string?)\n   :render (fn [ form-props extra] react-element)}\n  ```\n\n  The `extra` parameter is a map that has:\n\n  * `:form-instance` - The `this` of the form\n  * `:key->attribute` - If a RAD form. keyword to attribute map for the form fields\n  * `:validator` - The form-state validator for the form, if known\n\n  Plugins are rendered in order of their sorted key.\n  \"\n  [k plugin]\n  (swap! form-info-plugins assoc k plugin))\n\n(defn remove-form-info-plugin! [k]\n  (swap! form-info-plugins dissoc k))\n\n(defn- eiframe [js-props]\n  #?(:cljs\n     (let [[ref set-content-ref!] (hooks/use-state nil)\n           head-children (.-head ^js js-props)\n           body-children (.-body ^js js-props)\n           props         (-> (.-iprops ^js js-props)\n                           (assoc :ref set-content-ref!))\n           head-node     (some-> ^js ref (.-contentWindow) (.-document) (.-head))\n           body-node     (some-> ^js ref (.-contentWindow) (.-document) (.-body))]\n       (dom/create-element \"iframe\" (clj->js props)\n         #js [(when head-node (createPortal (clj->js head-children) head-node))\n              (when body-node (createPortal (clj->js body-children) body-node))]))))\n\n(defn ui-embedded-iframe\n  \"Renders the given `head-children` and `body-children` into an iframe's HEAD and BODY elements via portals. Allows\n   `props` is passed directly as the props of the iframe itself.\"\n  [props head-children body-children]\n  (dom/create-element eiframe #js {:iprops props\n                                   :head   head-children\n                                   :body   body-children}))\n\n(defn ident->on-screen-forms [app-ish ident]\n  (let [on-screen-components (comp/ident->components app-ish ident)\n        forms                (filter #(comp/component-options % :form-fields) on-screen-components)]\n    forms))\n\n(declare ui-form-info)\n\n(defsc FormDiffViewer [this props]\n  {:use-hooks? true}\n  (let [diff (fs/dirty-fields props true)\n        v    (fn [val] (if (nil? val) (dom/b \"nil\") (str val)))]\n    (if (empty? diff)\n      \"No changes\"\n      (table :.ui.small.compact.table {}\n        (thead nil\n          (tr nil\n            (th nil \"ident\")\n            (th nil \"field\")\n            (th nil \"before\")\n            (th nil \"after\")))\n        (tbody nil\n          (for [ident (keys diff)\n                :let [fields      (sort (keys (get diff ident)))\n                      rowspan     (count fields)\n                      first-field (first fields)]\n                field fields\n                :let [{:keys [before after]} (get-in diff [ident field])]]\n            (tr {:key field}\n              (when (= field first-field) (td {:rowSpan rowspan} (str ident)))\n              (td nil (str field))\n              (td nil (v before))\n              (td nil (v after)))))))))\n\n(def ui-form-diff-viewer (comp/computed-factory FormDiffViewer))\n\n(add-form-info-plugin! ::save-delta {:title  \"Form Save Delta\"\n                                     :render (fn [props cprops] (ui-form-diff-viewer props cprops))})\n\n(defn- form-attributes\n  \"Gets all of the attributes in use by a form and its subforms.\"\n  [form]\n  (let [form-options    (comp/component-options form)\n        base-attributes (fo/attributes form-options)\n        subform-map     (form/subform-options form-options)\n        subforms        (mapv fo/ui (vals subform-map))]\n    (into base-attributes\n      (mapcat\n        #(comp/component-options % fo/attributes)\n        subforms))))\n\n(defsc RADAttributeInfo [this props {:keys [form-instance]}]\n  {}\n  (let [all-attributes (form-attributes form-instance)]\n    (table :.ui.small.compact.table {}\n      (thead nil\n        (tr nil\n          (th nil \"Key\")\n          (th nil \"Schema\")\n          (th :.center.aligned nil \"Type\")\n          (th nil \"Style\")\n          (th nil \"Card.\")\n          (th nil \"Req?\")\n          (th nil \"Validator\")))\n      (tbody nil\n        (for [{::attr/keys [qualified-key required? type valid? schema target style]\n               :as         attr} (sort-by ao/qualified-key all-attributes)\n              :let [required?        (if required? \"Y\" \"N\")\n                    type-description (if (= type :ref)\n                                       (str \"ref => \" target)\n                                       (str (some-> type name)))\n                    card             (if (attr/to-many? attr) \"Many\" \"One\")\n                    valid            (if (fn? valid?) \"Local\")]]\n          (tr {:key (str qualified-key)}\n            (td nil (str qualified-key))\n            (td nil (str (if schema (name schema) \"--\")))\n            (td :.center.aligned nil type-description)\n            (td nil (str (or style \"default\")))\n            (td nil card)\n            (td nil required?)\n            (td nil (str valid))))))))\n\n(def ui-rad-attribute-info (comp/computed-factory RADAttributeInfo))\n\n(add-form-info-plugin! ::rad-info {:title  \"RAD Attribute Field Info\"\n                                   :render (fn [props cprops] (ui-rad-attribute-info props cprops))})\n\n(defsc FormInfo [this form-props {:keys [validator\n                                         form-instance\n                                         relation\n                                         visited] :as cprops}]\n  {:use-hooks? true}\n  (let [{::fs/keys [id fields pristine-state subforms complete?]} (::fs/config form-props)\n        state-map      (app/current-state this)\n        key->attribute (comp/component-options form-instance ::form/key->attribute)\n        [open-segments set-open-segments!] (hooks/use-state #(sorted-set ::current-state))\n        expanded?      (fn [k] (contains? open-segments k))\n        toggle!        (fn [k] (set-open-segments! (if (expanded? k) (disj open-segments k) (conj open-segments k))))]\n    (if (seq fields)\n      (div :.ui.segment {}\n        (dom/h4 :.ui.header (str (comp/component-name form-instance) relation \" \" id))\n        (dom/div :.ui.styled.fluid.accordion nil\n          (let [expanded? (expanded? ::form-state)]\n            (comp/fragment {}\n              (div :.title {:onClick #(toggle! ::form-state)\n                            :classes [(when expanded? \"active\")]}\n                (dom/i :.dropdown.icon)\n                (str \"Current State\"))\n              (div :.content {:classes [(when expanded? \"active\")]}\n                (when expanded?\n                  (comp/fragment {}\n                    (if (seq fields)\n                      (comp/fragment {}\n                        (dom/h4 :.ui.header \"Fields\")\n                        (table :.ui.small.compact.striped.table\n                          (thead nil\n                            (tr nil\n                              (th nil \"Field\")\n                              (th nil \"Original\")\n                              (th nil \"Current\")\n                              (th nil \"Complete?\")\n                              (th nil \"V?\")\n                              (th nil \"Notes\")))\n                          (tbody nil\n                            (map-indexed\n                              (fn [idx k]\n                                (let [subform?          (contains? subforms k)\n                                      valid-ident?      #(and (vector? %) (keyword? (first %)) (not (nil? (second %))))\n                                      current-value     (get-in state-map (conj id k)) ; idents, not denormalized from form-props\n                                      pristine-refs     (when subform? (get pristine-state k))\n                                      attr              (get key->attribute k)\n                                      expected-to-many? (some-> attr (attr/to-many?))\n                                      to-many?          (boolean\n                                                          (and\n                                                            subform?\n                                                            (or\n                                                              (every? valid-ident? current-value)\n                                                              (every? valid-ident? pristine-refs))))\n                                      bad-cardinality?  (and (boolean? expected-to-many?)\n                                                          (not= expected-to-many? to-many?))\n                                      bad-idents?       (fn [refs]\n                                                          (if to-many?\n                                                            (not (every? valid-ident? refs))\n                                                            (and refs (not (valid-ident? refs)))))\n                                      current-error?    (and subform? (bad-idents? current-value))\n                                      pristine-error?   (and subform? (bad-idents? pristine-refs))\n                                      validation-code   (if validator\n                                                          (validator form-props k)\n                                                          \"--\")\n                                      invalid?          (= :invalid validation-code)]\n                                  (tr {:key idx}\n                                    (td nil (str k))\n                                    (td {:classes [(when (or pristine-error? bad-cardinality?) \"error\")]} (str (get pristine-state k)))\n                                    (td {:classes [(when (or invalid? current-error? bad-cardinality?) \"error\")]} (str current-value))\n                                    (td nil (if (contains? complete? k) \"Y\" \"N\"))\n                                    (td nil (if validator (str validation-code) \"--\"))\n                                    (td nil\n                                      (cond-> []\n                                        (nil? attr) (conj (dom/p {:key \"noattr\"} \"Could not find the RAD attribute definition on the form.\"))\n                                        bad-cardinality? (conj (dom/p {:key \"badcard\"} \"The cardinality of the attribute does not match data.\"))\n                                        (or current-error? pristine-error?) (conj (dom/p {:key \"badidents\"} \"One or more of the idents are invalid\"))\n                                        )))))\n                              (concat fields (keys subforms))))))\n                      (comp/fragment {}\n                        (dom/h4 \"Picker (or hidden)\")))\n                    (when (seq subforms)\n                      (comp/fragment {}\n                        (dom/h4 \"Subforms\")\n                        (for [subform       (sort (keys subforms))\n                              :let [value (get form-props subform)\n                                    forms (cond\n                                            (map? value) [value]\n                                            (vector? value) value\n                                            :else nil)]\n                              subform-props forms\n                              :let [ident         (-> subform-props ::fs/config ::fs/id)\n                                    form-instance (comp/ident->any this ident)]\n                              :when (not (contains? visited ident))]\n                          (div {:key (str (or ident (hash subform-props)))}\n                            (ui-form-info subform-props (-> cprops\n                                                          (assoc :relation subform :form-instance form-instance)\n                                                          (update :visited conj subform-props))))))))))))\n          (when-not relation\n            (for [plugin-key (sort (keys @form-info-plugins))\n                  :let [{:keys [title render]} (get @form-info-plugins plugin-key)\n                        expanded? (expanded? plugin-key)]]\n              (comp/fragment {:key (str plugin-key)}\n                (div :.title {:onClick #(toggle! plugin-key)\n                              :classes [(when expanded? \"active\")]}\n                  (dom/i :.dropdown.icon)\n                  (str title))\n                (div :.content {:classes [(when expanded? \"active\")]}\n                  (when (and expanded? render)\n                    (render form-props cprops))))))))\n      (div (str (or id relation) \" is a picker or is not visible as a subform\")))))\n\n(def ui-form-info\n  \"\n  [props {:keys [form-instance validator]}]\n\n  The UI for the form debugging information. Can be used directly.\n\n  * `props` should be the props of the form in question\n\n  The additional options map:\n  * `form-instance` (REQURIED) - the `this` of the form.\n  * `validator` (OPTIONAL) - the validator for the fields. If not supplied then the validation\n  information will be inaccurate.\"\n  (comp/computed-factory FormInfo))\n\n(defsc FormDebugContainer [this {:keys [width height\n                                        form-instance\n                                        validator] :as options}]\n  {}\n  (let [form-props (comp/props form-instance)]\n    (ui-embedded-iframe {:style {:border \"none\"\n                                 :width  (or width \"100%\")\n                                 :height (or height \"100%\")}}\n      (dom/link {:href \"https://cdn.jsdelivr.net/npm/fomantic-ui@2.7.8/dist/semantic.min.css\" :rel \"stylesheet\"})\n      (div :.ui.segment {:style {:backgroundColor \"rgb(235,245,250)\"}}\n        (ui-form-info form-props options)))))\n\n(def ui-form-debug-container (comp/factory FormDebugContainer))\n\n(defn debugger\n  \"Render a debug UI for a form (RAD or otherwise). This embeds an iframe with semantic UI CSS so\n   that the debugger looks good independent of your page's CSS; however, if you are using SUI, then\n   you may find it easier to place/format the info by just using `ui-form-info` directly.\"\n  [form-instance]\n  (let [validator (comp/component-options form-instance fo/validator)]\n    (ui-form-debug-container {:form-instance form-instance\n                              :validator     validator})))\n\n(defn top-bottom-debugger\n  \"Use as the only item in the body of a RAD form. Will render the form first, and the debugger under it. Use `debugger`\n   if you want to deal with your own layout. REQUIRES SEMANTIC UI, and does not work well within a SUI container class.\n\n   If you supply `render`, a `(fn [] element)`, then it will be used instead of form/render-layout to render the form\n   itself.\"\n  ([form-instance props]\n   (comp/fragment\n     (div :.ui.basic.segment nil\n       (error-boundary\n         (let [validator (comp/component-options form-instance fo/validator)]\n           (ui-form-info props {:form-instance form-instance\n                                :validator     validator}))))\n     (div {:width \"100%\"}\n       (form/render-layout form-instance props))))\n  ([form-instance props render]\n   (comp/fragment\n     (div :.ui.basic.segment nil\n       (error-boundary\n         (let [validator (comp/component-options form-instance fo/validator)]\n           (ui-form-info props {:form-instance form-instance\n                                :validator     validator}))))\n     (div {:width \"100%\"}\n       (render)))))\n\n(defn side-by-side-debugger\n  \"Use as the only item in the body of a RAD form. Will render the form first, and the debugger under it. Use `debugger`\n   if you want to deal with your own layout. REQUIRES SEMANTIC UI, and does not work well within a SUI container class.\n\n   If you supply `render`, a `(fn [] element)`, then it will be used instead of form/render-layout to render the form\n   itself.\"\n  ([form-instance props]\n   (div :.ui.grid {}\n     (div :.eight.wide.column {}\n       (form/render-layout form-instance props))\n     (div :.eight.wide.column {}\n       (error-boundary\n         (let [validator (comp/component-options form-instance fo/validator)]\n           (ui-form-info props {:form-instance form-instance\n                                :validator     validator}))))))\n  ([form-instance props render]\n   (div :.ui.grid {}\n     (div :.eight.wide.column {}\n       (render))\n     (div :.eight.wide.column {}\n       (error-boundary\n         (let [validator (comp/component-options form-instance fo/validator)]\n           (ui-form-info props {:form-instance form-instance\n                                :validator     validator})))))))\n"]}