{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/decimal_field.cljc"],"mappings":";AAQA,AAAKA,2EACH,AAACC,wEAAa,sDAAA,iLAAA,2CAAA,lRAACC,0VACiB,WAAKC;AAAL,AAAQ,OAACC,yDAAkBD;GAD7C,uEAEkB,WAAKE;AAAL,AAAQ,oBAAI,iBAAAC,oBAAK,OAASD;AAAd,AAAA,GAAAC;AACE,IAAAC,mBACE,qBAAA,rBAACC,uCAA8BH;AADjC,AAAA,oBAAAE;AAAAA;;AAEE,4BAAA,rBAACC,sCAA6BH;;;AAHlCC;;;AAIF,OAACG,iDAAaJ;;AACd,OAACK;;GAP7B,sEAQkB,WAAKL;AAAL,AAAQ,OAACM,gBAAM,kBAAA,lBAACC,mCAA0BP;;AAE5E,AAAKQ,uEAAa,mGAAA,nGAACC,sIAAwBd","names":["com.fulcrologic.rad.rendering.semantic-ui.decimal-field/ui-decimal-input","com.fulcrologic.fulcro.components.factory","com.fulcrologic.fulcro.dom.inputs/StringBufferedInput","n","com.fulcrologic.rad.type-support.decimal/numeric->str","s","and__5043__auto__","or__5045__auto__","cljs.core/re-matches","com.fulcrologic.rad.type-support.decimal/numeric","com.fulcrologic.rad.type-support.decimal/zero","cljs.core/first","cljs.core/re-find","com.fulcrologic.rad.rendering.semantic-ui.decimal-field/render-field","com.fulcrologic.rad.rendering.semantic_ui.field.render_field_factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.decimal-field\n  (:require\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.dom.inputs :as inputs]\n    [clojure.string :as str]\n    [com.fulcrologic.rad.rendering.semantic-ui.field :refer [render-field-factory]]\n    [com.fulcrologic.rad.type-support.decimal :as math]))\n\n(def ui-decimal-input\n  (comp/factory (inputs/StringBufferedInput ::DecimalInput\n                  {:model->string (fn [n] (math/numeric->str n))\n                   :string->model (fn [s] (if (and (string? s)\n                                                (or\n                                                  (re-matches #\"^-?\\d+(\\.\\d*)?$\" s)\n                                                  (re-matches #\"^-?\\d*(\\.\\d+)$\" s)))\n                                            (math/numeric s)\n                                            (math/zero)))\n                   :string-filter (fn [s] (first (re-find #\"^-?\\d*(\\.\\d*)?\" s)))})))\n\n(def render-field (render-field-factory {} ui-decimal-input))\n"]}