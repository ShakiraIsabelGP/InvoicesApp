{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/boolean_field.cljc"],"mappings":";AAcA,uEAAA,+EAAAA,tJAAMI,+JAAoDG;AAA1D,AAAA,IAAAN,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAAA,NAAqDK;oBAArD,AAAAH,4CAAAF,eAAA,3EAAkCI;AAAlC,AACE,IAAMG,IAAY,AAAA,gKAAsBD;IAClCE,QAAY,CAACC,wEAAAA,uFAAAA,jBAAWL,mEAAAA;IACxBM,aAAY,AAACC,oFAAG,0DAAA,1DAACC,4CAAwBP,IAAIC,6HAAwBD;IACrEQ,cAAY,AAACC,qCAAiBT,IAAIC;IAClCS,iBAAY,AAACC,8CAAoBZ,cAAcE;IAC/CW,mBAAY,AAACC,0CAAgBd,cAAcE;IAC3Ca,oBAAa,AAACC,2CAAiBhB,cAAcE;IAC7Ce,YAAY,AAACC,iEAAelB,cAAcE;IAC1CiB,QAAY,oDAAA,pDAACrB,4CAAIM,MAAMD;AAR7B,AASE,GAAMQ;AAAN,AACE,OAAAS,8EAAA,MAAA,mFAAA,2CAAA,gEAAiB,iBAAAC,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAA;;KAAjB,oDACiB,4CAAKlB,WACpB,AAAAiB,8EAAA,MAAA,mFACE,AAAAA,8EAAA,QAAA,mFAAO,uGAAA,2CAAA,gEAAA,qDAAA,WAAA,mGAAA,rXAACE,4MACYH,oIAEA,AAACI,mBAAQV,+EACT,WAAKW;AAAL,AACE,IAAMC,IAAE,AAACC,cAAIP;AAAb,AACE,AAACQ,0CAAiB1B,IAAIE,EAAEsB;;AACxB,OAACG,6CAAoB3B,IAAIE,EAAEsB;6VAVvD,7EAEE,5OACE,zBAQSnB,+BACT,qBAAA,KAAA,xBAAUS,wBAAY,AAAAK,8EAAA,QAAA,uGAAA,pBAAOX;;AAbnC","names":["p__93168","map__93169","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.rad.rendering.semantic-ui.boolean-field/render-field","form-instance","env","attribute","k","props","com.fulcrologic.fulcro.components/props","user-props","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.form/field-style-config","field-label","com.fulcrologic.rad.form/field-label","visible?","com.fulcrologic.rad.form/field-visible?","read-only?","com.fulcrologic.rad.form/read-only?","omit-label?","com.fulcrologic.rad.form/omit-label?","top-class","com.fulcrologic.rad.rendering.semantic-ui.form-options/top-class","value","com.fulcrologic.fulcro.dom.macro_create_element","or__5045__auto__","cljs.core.merge","cljs.core/boolean","evt","v","cljs.core/not","com.fulcrologic.rad.form/input-blur!","com.fulcrologic.rad.form/input-changed!"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.boolean-field\n  (:require\n    #?(:cljs\n       [com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n       :clj\n       [com.fulcrologic.fulcro.dom-server :as dom :refer [div label input]])\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.string :as str]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.rendering.semantic-ui.form-options :as sufo]\n    [com.fulcrologic.fulcro.dom.events :as evt]))\n\n(defn render-field [{::form/keys [form-instance] :as env} attribute]\n  (let [k           (::attr/qualified-key attribute)\n        props       (comp/props form-instance)\n        user-props  (?! (form/field-style-config env attribute :input/props) env)\n        field-label (form/field-label env attribute)\n        visible?    (form/field-visible? form-instance attribute)\n        read-only?  (form/read-only? form-instance attribute)\n        omit-label?  (form/omit-label? form-instance attribute)\n        top-class   (sufo/top-class form-instance attribute)\n        value       (get props k false)]\n    (when visible?\n      (div {:className (or top-class \"ui field\")\n            :key       (str k)}\n        (div :.ui.checkbox\n          (input (merge\n                   {:checked  value\n                    :type     \"checkbox\"\n                    :disabled (boolean read-only?)\n                    :onChange (fn [evt]\n                                (let [v (not value)]\n                                  (form/input-blur! env k v)\n                                  (form/input-changed! env k v)))}\n                   user-props))\n          (when-not omit-label? (label field-label)))))))\n\n"]}