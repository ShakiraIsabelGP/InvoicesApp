{"version":3,"sources":["com/wsscode/pathom/misc.cljc"],"mappings":"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","names":["js/goog.define","com.wsscode.pathom.misc/INCLUDE_SPECS","com.wsscode.pathom.misc/pathom-random-uuid","cljs.core/random-uuid","var_args","G__63617","com.wsscode.pathom.misc/distinct-by","js/Error","f","rf","seen","cljs.core/volatile!","result","x","fx","cljs.core/deref","cljs.core/contains?","cljs.core.conj","coll","step","xs","cljs.core/LazySeq","p__63621","vec__63623","cljs.core.nth","temp__5804__auto__","s","cljs.core/seq","cljs.core/rest","cljs.core/cons","G__63633","com.wsscode.pathom.misc/dedupe-by","pv","prior","cljs.core/vreset!","cljs.core._EQ_","cljs.core.sequence","com.wsscode.pathom.misc.dedupe_by","com.wsscode.pathom.misc/index-by","cljs.core.reduce","m","cljs.core.assoc","com.wsscode.pathom.misc/sconj","cljs.core.fnil","cljs.core/conj","com.wsscode.pathom.misc/vconj","G__63639","com.wsscode.pathom.misc/queue","cljs.core/PersistentQueue","com.wsscode.pathom.misc.queue","com.wsscode.pathom.misc/map-keys","cljs.core.into","iter__5523__auto__","s__63641","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__63643","cljs.core/chunk-buffer","i__63642","vec__63644","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63640","cljs.core/chunk-rest","vec__63647","cljs.core/first","k","v","com.wsscode.pathom.misc/map-vals","s__63655","b__63657","i__63656","vec__63659","iter__63654","vec__63665","cljs.core/chunk-first"],"sourcesContent":["(ns com.wsscode.pathom.misc\n  #?(:clj\n     (:import\n       (java.util\n         UUID))))\n\n#?(:clj  (def INCLUDE_SPECS true)\n   :cljs (goog-define INCLUDE_SPECS true))\n\n(defn pathom-random-uuid []\n  #?(:clj  (UUID/randomUUID)\n     :cljs (random-uuid)))\n\n(defn distinct-by\n  \"Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\"\n  ([f]\n   (fn [rf]\n     (let [seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [fx (f x)]\n            (if (contains? @seen fx)\n              result\n              (do (vswap! seen conj fx)\n                  (rf result x)))))))))\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [fx (f x)]\n                         (if (contains? seen fx)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen fx)))))))\n                   xs seen)))]\n     (step coll #{}))))\n\n(defn dedupe-by\n  \"Returns a lazy sequence removing consecutive duplicates in coll when passed to a function f.\n  Returns a transducer when no collection is provided.\"\n  {:added \"1.7\"}\n  ([f]\n   (fn [rf]\n     (let [pv (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [prior @pv\n                fx    (f x)]\n            (vreset! pv fx)\n            (if (= prior fx)\n              result\n              (rf result x))))))))\n  ([f coll] (sequence (dedupe-by f) coll)))\n\n(defn index-by\n  \"Like group by, but will keep only the last result.\"\n  [f coll]\n  (reduce\n    (fn [m x]\n      (assoc m (f x) x))\n    {}\n    coll))\n\n(def sconj (fnil conj #{}))\n(def vconj (fnil conj []))\n\n(defn queue\n  \"Create a queue.\"\n  ([] #?(:clj  clojure.lang.PersistentQueue/EMPTY\n         :cljs cljs.core/PersistentQueue.EMPTY))\n  ([coll]\n   (reduce conj (queue) coll)))\n\n(defn map-keys\n  \"Map over the given hash-map keys.\n\n  Example:\n    (map-keys #(str/replace (name %) \\\"_\\\" \\\"-\\\") {\\\"foo_bar\\\" 1}) => {\\\"foo-bar\\\" 1}\n  \"\n  [f m]\n  (into {} (for [[k v] m] [(f k) v])))\n\n(defn map-vals\n  \"Map over the given hash-map vals.\n\n  Example:\n    (map-vals inc {:a 1 :b 2})\n  \"\n  [f m]\n  (into {} (for [[k v] m] [k (f v)])))\n"]}