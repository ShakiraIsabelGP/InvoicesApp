{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/controls/boolean_control.cljc"],"mappings":"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","names":["options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__93188","com.fulcrologic.fulcro.components/props","cljs.core/--destructure-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.controls","js/com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control","js/com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control.BooleanControl","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control/BooleanControl","_","instance","control","control-key","map__93189","controls","com.fulcrologic.rad.control.component_controls","label","style","onChange","disabled?","visible?","user-props","label-top?","toggle?","or__5045__auto__","cljs.core/boolean?","cljs.core._EQ_","com.fulcrologic.rad.options_util._QMARK__BANG_","value","com.fulcrologic.rad.control/current-value","inp-attr","cljs.core.merge","cljs.core/boolean","com.fulcrologic.rad.control/set-parameter!","cljs.core/not","G__93190","G__93191","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.fulcro.components.fragment","com.fulcrologic.fulcro.dom/macro-create-element*","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control/render-control","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [taoensso.timbre :as log]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])\n    [com.fulcrologic.rad.control :as control]))\n\n(defsc BooleanControl [_ {:keys [instance control control-key]}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [controls (control/component-controls instance)\n        {:keys [label style onChange disabled? visible? user-props label-top? toggle?]\n         :or   {toggle? true} :as control} (or control (get controls control-key))]\n    (let [toggle? (cond\n                    (boolean? toggle?) toggle?\n                    (= :toggle style) true\n                    :else false)]\n      (if control\n        (when (or (nil? visible?) (?! visible? instance))\n          (let [label     (or (?! label instance))\n                disabled? (?! disabled? instance)\n                value     (control/current-value instance control-key)\n                inp-attr  (merge user-props\n                            {:type     \"checkbox\"\n                             :readOnly (boolean disabled?)\n                             :onChange (fn [_]\n                                         (control/set-parameter! instance control-key (not value))\n                                         (when onChange\n                                           (onChange instance (not value))))\n                             :checked  (boolean value)})]\n            (dom/div :.field {:key (str control-key)}\n              (if label-top?\n                (comp/fragment\n                  (dom/label label)\n                  (dom/div :.ui.fitted.checkbox {:key (str control-key) :classes [(when toggle? \"toggle\")]}\n                    (dom/input inp-attr)\n                    (dom/label \"\")))\n                (comp/fragment\n                  (dom/div :.ui.checkbox {:key (str control-key) :classes [(when toggle? \"toggle\")]}\n                    (dom/input inp-attr)\n                    (dom/label label)))))))\n        (log/error \"Could not find control definition for \" control-key)))))\n\n(def render-control (comp/factory BooleanControl {:keyfn :control-key}))\n"]}