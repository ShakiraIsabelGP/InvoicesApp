{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/field.cljc"],"mappings":"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","names":["var_args","G__93176","com.fulcrologic.rad.rendering.semantic-ui.field/render-field-factory","js/Error","input-factory","com.fulcrologic.rad.rendering.semantic_ui.field.render_field_factory","addl-props","p__93177","p__93178","map__93179","cljs.core/--destructure-map","cljs.core.get","map__93180","form-instance","env","qualified-key","attribute","map__93181","map__93182","com.fulcrologic.rad.form/field-label","com.fulcrologic.rad.form/field-visible?","com.fulcrologic.rad.form/omit-label?","or__5045__auto__","com.fulcrologic.rad.form/computed-value","and__5043__auto__","com.fulcrologic.fulcro.components/props","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.form/field-style-config","com.fulcrologic.rad.form/invalid-attribute-value?","com.fulcrologic.rad.form/read-only?","com.fulcrologic.rad.form/validation-error-message","value","field-style-config","visible?","read-only?","validation-message","omit-label?","field-label","invalid?","cljs.core.merge","G__93183","cljs.core.assoc","top-class","com.fulcrologic.rad.rendering.semantic-ui.form-options/top-class","com.fulcrologic.fulcro.dom.macro_create_element","G__93184","cljs.core/name","clojure.string/capitalize","com.fulcrologic.fulcro.dom.html-entities/nbsp","G__93185","v","com.fulcrologic.rad.form/input-blur!","com.fulcrologic.rad.form/input-changed!","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.field\n  (:require\n    [clojure.string :as str]\n    #?(:cljs [com.fulcrologic.fulcro.dom :refer [div label span]]\n       :clj  [com.fulcrologic.fulcro.dom-server :refer [div label span]])\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.fulcro.dom.html-entities :as ent]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.rendering.semantic-ui.form-options :as sufo]))\n\n(defn render-field-factory\n  \"Create a general field factory using the given input factory as the function to call to draw an input.\"\n  ([input-factory]\n   (render-field-factory {} input-factory))\n  ([addl-props input-factory]\n   (fn [{::form/keys [form-instance] :as env} {::attr/keys [qualified-key] :as attribute}]\n     (form/with-field-context [{:keys [value field-style-config\n                                       visible? read-only?\n                                       validation-message\n                                       omit-label?\n                                       field-label invalid?]} (form/field-context env attribute)\n                               addl-props (-> field-style-config\n                                            (merge addl-props)\n                                            (cond->\n                                              read-only? (assoc :readOnly \"readonly\")))]\n       (let [top-class (sufo/top-class form-instance attribute)]\n         (when visible?\n           (div {:key     (str qualified-key)\n                 :classes [(or top-class \"ui field\") (when invalid? \"error\")]}\n             (when-not omit-label?\n               (label\n                 (or field-label (some-> qualified-key name str/capitalize))\n                 (when invalid? (if (string? validation-message)\n                                  (str ent/nbsp \"(\" validation-message \")\")\n                                  validation-message))))\n             (input-factory (merge addl-props\n                              {:value    value\n                               :onBlur   (fn [v] (form/input-blur! env qualified-key v))\n                               :onChange (fn [v] (form/input-changed! env qualified-key v))}))\n             (when (and invalid? omit-label?)\n               (div nil validation-message)))))))))\n"]}