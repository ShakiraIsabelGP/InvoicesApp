{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/form.cljc"],"mappings":"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","names":["p__91787","p__91788","map__91789","cljs.core/--destructure-map","cljs.core.get","map__91790","com.fulcrologic.rad.rendering.semantic-ui.form/render-to-many","form-instance","env","k","attr","options","map__91791","add-position","ui","title","can-delete?","can-add?","added-via-upload?","ref-container-class","com.fulcrologic.rad.form_options.subform_options","com.fulcrologic.fulcro.components/component-options","form-instance-props","com.fulcrologic.fulcro.components/props","read-only?","com.fulcrologic.rad.form/read-only?","add?","com.fulcrologic.rad.options_util._QMARK__BANG_","delete?","item","and__5043__auto__","items","or__5045__auto__","G__91792","invalid?","com.fulcrologic.rad.form/invalid-attribute-value?","visible?","com.fulcrologic.rad.form/field-visible?","validation-message","com.fulcrologic.rad.form/validation-error-message","add","order","cljs.core/Keyword","com.fulcrologic.fulcro.dom.macro_create_element","evt","map__91793","new-id","com.fulcrologic.fulcro.algorithms.tempid.tempid","js-file","com.fulcrologic.rad.blob/evt->js-files","cljs.core/first","attributes","id-attr","id-key","qualified-key","sha-attr","cljs.core.filter","target","cljs.core.conj","com.fulcrologic.fulcro.components/get-ident","new-entity","com.fulcrologic.fulcro.algorithms.form_state.add_form_config","com.fulcrologic.fulcro.algorithms.merge.merge_component_BANG_","com.fulcrologic.rad.blob/upload-file!","possible-types","com.fulcrologic.fulcro.components/union-component?","cljs.core.mapv","com.fulcrologic.fulcro.components/query->component","cljs.core/vals","com.fulcrologic.fulcro.components.get_query","cljs.core.map_indexed","idx","c","add-child!","_","com.fulcrologic.rad.form.add_child_BANG_","add-label","com.fulcrologic.rad.form-options/add-label","com.fulcrologic.fulcro.components.fragment","cljs.core/seq","com.fulcrologic.fulcro.dom/macro-create-element*","ui-factory","com.fulcrologic.fulcro.components.computed_factory","cljs.core/second","top-class","com.fulcrologic.rad.rendering.semantic-ui.form-options/top-class","body-class","com.fulcrologic.fulcro.dom.html-entities/nbsp","cljs.core._EQ_","props","G__91794","G__91795","cljs.core.merge","com.fulcrologic.fulcro-i18n.i18n/fulcro_tr","p__91796","p__91797","map__91798","map__91799","com.fulcrologic.rad.rendering.semantic-ui.form/render-to-one","master-form","map__91800","form-props","ChildForm","com.fulcrologic.fulcro.components/union-child-for-props","G__91801","std-props","G__91802","G__91803","possible-forms","p__91804","map__91805","com.fulcrologic.rad.rendering.semantic-ui.form/standard-ref-container","cardinality","p__91806","p__91807","map__91808","map__91809","com.fulcrologic.rad.rendering.semantic-ui.form/render-single-file","map__91810","parent","label","com.fulcrologic.rad.form/field-label","G__91811","G__91812","options__50845__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__91813","map__91814","map__91815","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.form","js/com.fulcrologic.rad.rendering.semantic-ui.form.ManyFiles","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.form/ManyFiles","this","cljs.core/rand-int","map__91816","sort-children","G__91817","G__91818","G__91819","upload-id","com.fulcrologic.fulcro.components.get_state","map__91820","com.fulcrologic.fulcro.components.set_state_BANG_","G__91821","G__91822","com.fulcrologic.fulcro-i18n.i18n/fulcro_trc","com.fulcrologic.rad.rendering.semantic-ui.form/ui-many-files","com.fulcrologic.fulcro.components.factory","p__91823","map__91824","attribute","p__91825","map__91826","com.fulcrologic.rad.rendering.semantic-ui.form/file-ref-container","G__91827","com.fulcrologic.rad.rendering.semantic-ui.form/render-attribute","render-ref","com.fulcrologic.rad.form/ref-container-renderer","com.fulcrologic.rad.form/render-field","com.fulcrologic.rad.rendering.semantic-ui.form/n-fields-string","com.fulcrologic.rad.rendering.semantic-ui.form/attribute-map","cljs.core/memoize","cljs.core.reduce","p__91828","map__91829","m","cljs.core.assoc","com.fulcrologic.rad.rendering.semantic-ui.form/render-layout*","k->attribute","layout","js/goog.DEBUG","cljs.core/vector?","cljs.core/every?","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e91830","cljs.core.into","row","G__91831","cljs.core/count","col","b2__2953__auto__","G__91832","G__91833","com.fulcrologic.rad.control.render_control","p__91834","map__91835","com.fulcrologic.rad.rendering.semantic-ui.form/render-layout","map__91837","com.fulcrologic.fulcro.components/get-computed","js/com.fulcrologic.rad.rendering.semantic-ui.form.TabbedLayout","com.fulcrologic.rad.rendering.semantic-ui.form/TabbedLayout","tabbed-layout","e91836","k->attr","tab-labels","cljs.core/filterv","cljs.core/string?","tab-label->layout","cljs.core.map","cljs.core/vec","cljs.core.partition","cljs.core.partition_by","com.fulcrologic.fulcro.components/component-name","map__91838","map__91839","tab-details","current-tab","active-layout","G__91840","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.rad.rendering.semantic-ui.form/ui-tabbed-layout","p__91841","map__91842","com.fulcrologic.rad.rendering.semantic-ui.form/standard-abandon-modal","open?","com.fulcrologic.semantic-ui.modules.modal.ui-modal/ui-modal","com.fulcrologic.semantic-ui.modules.modal.ui-modal-content/ui-modal-content","com.fulcrologic.semantic-ui.modules.modal.ui-modal-actions/ui-modal-actions","com.fulcrologic.rad.form.clear_route_denied_BANG_","com.fulcrologic.rad.form.continue_abandoned_route_BANG_","map__91844","js/com.fulcrologic.rad.rendering.semantic-ui.form.StandardFormContainer","com.fulcrologic.rad.rendering.semantic-ui.form/StandardFormContainer","computed-props","map__91845","map__91846","nested?","cljs.core.not_EQ_","read-only-form?","new?","errors","com.fulcrologic.rad.form.invalid_QMARK_","errors?","render-fields","com.fulcrologic.rad.form/form-layout-renderer","com.fulcrologic.rad.rendering.semantic-ui.form/standard-form-layout-renderer","valid?","com.fulcrologic.rad.form.valid_QMARK_","dirty?","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_","cljs.core/not","com.fulcrologic.rad.form.delete_child_BANG_","map__91847","map__91848","action-buttons","show-header?","route-denied?","com.fulcrologic.rad.form/standard-action-buttons","com.fulcrologic.rad.form-options/show-header?","abandon-modal","com.fulcrologic.rad.form/render-fn","cljs.core/fn?","com.fulcrologic.rad.semantic_ui_options.get_rendering_options","com.fulcrologic.rad.semantic-ui-options/layout-class","com.fulcrologic.rad.semantic-ui-options/controls-class","p1__91843#","cljs.core.keep","p__91849","map__91850","message","com.fulcrologic.rad.form/undo-via-load!","com.fulcrologic.rad.rendering.semantic-ui.form/standard-form-container","p__91851","map__91852","map__91853","debug?","com.fulcrologic.rad.debugging.top_bottom_debugger","cljs.core/constantly","p__91854","map__91855","com.fulcrologic.rad.rendering.semantic-ui.form/file-icon-renderer*","map__91856","sha-key","file-key","com.fulcrologic.rad.blob/filename-key","url-key","com.fulcrologic.rad.blob/url-key","filename","failed?","com.fulcrologic.rad.blob/failed-upload?","pct","com.fulcrologic.rad.blob/upload-percentage","sha","url","com.fulcrologic.rad.blob/uploading?","com.fulcrologic.fulcro.application/abort!","G__91858","G__91859","G__91860","G__91861","G__91862","fexpr__91857","com.fulcrologic.fulcro.dom/span","com.fulcrologic.fulcro.dom/a","com.fulcrologic.rad.blob/blob-downloadable?","js/confirm","com.fulcrologic.fulcro.dom.events/stop-propagation!","com.fulcrologic.fulcro.dom.events/prevent-default!","com.fulcrologic.rad.rendering.semantic-ui.form/file-icon-renderer"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.form\n  (:require\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom :refer [div h3 button i span]]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom :refer [div h3 button i span]])\n    [com.fulcrologic.fulcro-i18n.i18n :refer [tr trf trc]]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    [com.fulcrologic.fulcro.dom.html-entities :as ent]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.blob :as blob]\n    [com.fulcrologic.rad.control :as control]\n    [com.fulcrologic.rad.debugging :as debug]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.form-options :as fo]\n    [com.fulcrologic.rad.options-util :refer [?! narrow-keyword]]\n    [com.fulcrologic.rad.rendering.semantic-ui.form-options :as sufo]\n    [com.fulcrologic.rad.semantic-ui-options :as suo]\n    [com.fulcrologic.semantic-ui.modules.modal.ui-modal :refer [ui-modal]]\n    [com.fulcrologic.semantic-ui.modules.modal.ui-modal-actions :refer [ui-modal-actions]]\n    [com.fulcrologic.semantic-ui.modules.modal.ui-modal-content :refer [ui-modal-content]]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(defn render-to-many [{::form/keys [form-instance] :as env} {k ::attr/qualified-key :as attr} options]\n  (let [{:semantic-ui/keys [add-position]\n         ::form/keys       [ui title can-delete? can-add? added-via-upload?]\n         ::keys            [ref-container-class]} (fo/subform-options (comp/component-options form-instance) attr)\n        form-instance-props (comp/props form-instance)\n        read-only?          (form/read-only? form-instance attr)\n        add?                (if read-only? false (?! can-add? form-instance attr))\n        delete?             (fn [item] (and (not read-only?) (?! can-delete? form-instance item)))\n        items               (get form-instance-props k)\n        title               (?! (or title (some-> ui (comp/component-options ::form/title)) \"\") form-instance form-instance-props)\n        invalid?            (form/invalid-attribute-value? env attr)\n        visible?            (form/field-visible? form-instance attr)\n        validation-message  (form/validation-error-message env attr)\n        add                 (when (or (nil? add?) add?)\n                              (let [order (if (keyword? add?) add? :append)]\n                                (if (?! added-via-upload? env)\n                                  (dom/input {:type     \"file\"\n                                              :onChange (fn [evt]\n                                                          (let [new-id     (tempid/tempid)\n                                                                js-file    (-> evt blob/evt->js-files first)\n                                                                attributes (comp/component-options ui ::form/attributes)\n                                                                id-attr    (comp/component-options ui ::form/id)\n                                                                id-key     (::attr/qualified-key id-attr)\n                                                                {::attr/keys [qualified-key] :as sha-attr} (first (filter ::blob/store\n                                                                                                                    attributes))\n                                                                target     (conj (comp/get-ident form-instance) k)\n                                                                new-entity (fs/add-form-config ui\n                                                                             {id-key        new-id\n                                                                              qualified-key \"\"})]\n                                                            (merge/merge-component! form-instance ui new-entity order target)\n                                                            (blob/upload-file! form-instance sha-attr js-file {:file-ident [id-key new-id]})))})\n                                  (let [possible-types (if (comp/union-component? ui)\n                                                         (mapv comp/query->component (vals (comp/get-query ui)))\n                                                         [ui])]\n                                    (map-indexed\n                                      (fn [idx c]\n                                        (let [add-child! (fn [_] (form/add-child! form-instance k c {::form/order order}))\n                                              add-label  (or\n                                                           (?! (comp/component-options c fo/add-label) c add-child!)\n                                                           \"\")]\n                                          (comp/fragment {:key (str idx)}\n                                            (if (string? add-label)\n                                              (button :.ui.tiny.icon.button\n                                                {:classes [(when (seq add-label) \"labeled\")]\n                                                 :key     (str idx)\n                                                 :onClick add-child!}\n                                                (i :.plus.icon)\n                                                add-label)\n                                              add-label))))\n                                      possible-types)))))\n        ui-factory          (comp/computed-factory ui {:keyfn (fn [item] (-> ui (comp/get-ident item) second str))})\n        top-class           (sufo/top-class form-instance attr)\n        body-class          (or top-class \"ui container\")]\n    (when visible?\n      (div {:className body-class :key (str k)}\n        (h3 title (span ent/nbsp ent/nbsp) (when (or (nil? add-position) (= :top add-position)) add))\n        (when invalid?\n          (div :.ui.red.message\n            validation-message))\n        (if (seq items)\n          (div {:className (or (?! ref-container-class env) \"ui segments\")}\n            (mapv\n              (fn [props]\n                (ui-factory props\n                  (merge\n                    env\n                    {::form/parent          form-instance\n                     ::form/parent-relation k\n                     ::form/can-delete?     (if delete? (delete? props) false)})))\n              items))\n          (div :.ui.message (tr \"None.\")))\n        (when (= :bottom add-position) add)))))\n\n(defn render-to-one [{::form/keys [master-form\n                                   form-instance] :as env} {k ::attr/qualified-key :as attr} options]\n  (let [{::form/keys [ui can-add? can-delete? title ref-container-class]} (fo/subform-options options attr)\n        form-props (comp/props form-instance)\n        props      (get form-props k)\n        top-class  (or (sufo/top-class form-instance attr) \"\")]\n    (cond\n      props\n      (let [ui-factory         (comp/computed-factory ui)\n            ChildForm          (if (comp/union-component? ui)\n                                 (comp/union-child-for-props ui props)\n                                 ui)\n            title              (?! (or title (some-> ChildForm (comp/component-options ::form/title)) \"\") form-instance form-props)\n            visible?           (form/field-visible? form-instance attr)\n            invalid?           (form/invalid-attribute-value? env attr)\n            validation-message (form/validation-error-message env attr)\n            std-props          {::form/nested?         true\n                                ::form/parent          form-instance\n                                ::form/parent-relation k\n                                ::form/can-delete?     (or\n                                                         (?! can-delete? form-instance form-props)\n                                                         false)}]\n        (when visible?\n          (div {:key       (str k)\n                :className top-class\n                :classes   [(?! ref-container-class env)]}\n            (h3 :.ui.header title)\n            (when invalid?\n              (div :.ui.red.message validation-message))\n            (ui-factory props (merge env std-props)))))\n\n      (or (nil? can-add?) (?! can-add? form-instance attr))\n      (let [possible-forms (if (comp/union-component? ui)\n                             (mapv comp/query->component (vals (comp/get-query ui)))\n                             [ui])]\n        (div {:key       (str k)\n              :className top-class\n              :classes   [(?! ref-container-class env)]}\n          (h3 :.ui.header title)\n          (map-indexed\n            (fn [idx ui]\n              (let [add-child! (fn [] (form/add-child! form-instance k ui))\n                    add-label  (or\n                                 (?! (comp/component-options ui fo/add-label) ui add-child!)\n                                 \"\")]\n                (comp/fragment {:key (str idx)}\n                  (if (string? add-label)\n                    (button :.ui.icon.button {:onClick add-child!\n                                              :classes [(when (seq add-label) \"labeled\")]}\n                      (dom/i :.plus.icon)\n                      add-label)\n                    add-label))))\n            possible-forms))))))\n\n(defn standard-ref-container [env {::attr/keys [cardinality] :as attr} options]\n  (if (= :many cardinality)\n    (render-to-many env attr options)\n    (render-to-one env attr options)))\n\n(defn render-single-file [{::form/keys [form-instance] :as env} {k ::attr/qualified-key :as attr} options]\n  (let [{::form/keys [ui can-delete?]} (fo/subform-options options attr)\n        parent     (comp/props form-instance)\n        form-props (comp/props form-instance)\n        props      (get form-props k)\n        ui-factory (comp/computed-factory ui)\n        label      (form/field-label env attr)\n        visible?   (form/field-visible? form-instance attr)\n        top-class  (sufo/top-class form-instance attr)\n        std-props  {::form/nested?         true\n                    ::form/parent          form-instance\n                    ::form/parent-relation k\n                    ::form/can-delete?     (if can-delete?\n                                             (can-delete? parent props)\n                                             false)}]\n    (when visible?\n      (if props\n        (div {:className (or top-class \"field\")\n              :key       (str k)}\n          (dom/label label)\n          (ui-factory props (merge env std-props)))\n        (div {:className (or top-class \"\")\n              :key       (str k)}\n          (div (tr \"Upload??? (TODO)\")))))))\n\n(defsc ManyFiles [this {{::form/keys [form-instance master-form] :as env} :env\n                        {k ::attr/qualified-key :as attr}                 :attribute\n                        options                                           :options}]\n  {:initLocalState (fn [this] {:input-key (str (rand-int 1000000))})}\n  (let [{:semantic-ui/keys [add-position]\n         ::form/keys       [ui title can-delete? can-add? sort-children]} (fo/subform-options options attr)\n        form-instance-props (comp/props form-instance)\n        read-only?          (or\n                              (form/read-only? master-form attr)\n                              (form/read-only? form-instance attr))\n        add?                (if read-only? false (?! can-add? form-instance attr))\n        delete?             (if read-only? false (fn [item] (?! can-delete? form-instance item)))\n        items               (-> form-instance comp/props k\n                              (cond->\n                                sort-children sort-children))\n        title               (?! (or title (some-> ui (comp/component-options ::form/title)) \"\") form-instance form-instance-props)\n        upload-id           (str k \"-file-upload\")\n        add                 (when (or (nil? add?) add?)\n                              (dom/div\n                                (dom/label :.ui.labeled.green.icon.button {:htmlFor upload-id}\n                                  (dom/i :.ui.plus.icon)\n                                  (tr \"Add File\"))\n                                (dom/input {:type     \"file\"\n                                            ;; trick: changing the key on change clears the input, so a failed upload can be retried\n                                            :key      (comp/get-state this :input-key)\n                                            :id       upload-id\n                                            :style    {:zIndex  -1\n                                                       :width   \"1px\"\n                                                       :height  \"1px\"\n                                                       :opacity 0}\n                                            :onChange (fn [evt]\n                                                        (let [new-id     (tempid/tempid)\n                                                              js-file    (-> evt blob/evt->js-files first)\n                                                              attributes (comp/component-options ui ::form/attributes)\n                                                              id-attr    (comp/component-options ui ::form/id)\n                                                              id-key     (::attr/qualified-key id-attr)\n                                                              {::attr/keys [qualified-key] :as sha-attr} (first (filter ::blob/store\n                                                                                                                  attributes))\n                                                              target     (conj (comp/get-ident form-instance) k)\n                                                              new-entity (fs/add-form-config ui\n                                                                           {id-key        new-id\n                                                                            qualified-key \"\"})]\n                                                          (merge/merge-component! form-instance ui new-entity :append target)\n                                                          (blob/upload-file! form-instance sha-attr js-file {:file-ident [id-key new-id]})\n                                                          (comp/set-state! this {:input-key (str (rand-int 1000000))})))})))\n        visible?            (form/field-visible? form-instance attr)\n        top-class           (sufo/top-class form-instance attr)\n        ui-factory          (comp/computed-factory ui {:keyfn (fn [item] (-> ui (comp/get-ident item) second str))})]\n    (when visible?\n      (div {:className (or top-class \"ui basic segment\")\n            :key       (str k)}\n        (dom/h2 :.ui.header title)\n        (when (or (nil? add-position) (= :top add-position)) add)\n        (if (seq items)\n          (div :.ui.very.relaxed.items\n            (mapv\n              (fn [props]\n                (ui-factory props\n                  (merge\n                    env\n                    {::form/parent          form-instance\n                     ::form/parent-relation k\n                     ::form/can-delete?     (if delete? (?! delete? props) false)})))\n              items))\n          (div :.ui.message\n            (trc \"there are no files in a list of uploads\" \"No files.\")))\n\n        (when (= :bottom add-position) add)))))\n\n(def ui-many-files (comp/factory ManyFiles {:keyfn (fn [{:keys [attribute]}] (::attr/qualified-key attribute))}))\n\n(defn file-ref-container\n  [env {::attr/keys [cardinality] :as attr} options]\n  (if (= :many cardinality)\n    (ui-many-files {:env env :attribute attr :options options})\n    (render-single-file env attr options)))\n\n(defn render-attribute [env attr options]\n  (if (fo/subform-options options attr)\n    (let [render-ref (or (form/ref-container-renderer env attr) standard-ref-container)]\n      (render-ref env attr options))\n    (form/render-field env attr)))\n\n(def n-fields-string {1 \"one field\"\n                      2 \"two fields\"\n                      3 \"three fields\"\n                      4 \"four fields\"\n                      5 \"five fields\"\n                      6 \"six fields\"\n                      7 \"seven fields\"})\n\n(def attribute-map (memoize\n                     (fn [attributes]\n                       (reduce\n                         (fn [m {::attr/keys [qualified-key] :as attr}]\n                           (assoc m qualified-key attr))\n                         {}\n                         attributes))))\n\n(defn- render-layout* [env options k->attribute layout]\n  (when #?(:clj true :cljs goog.DEBUG)\n    (when-not (and (vector? layout) (every? vector? layout))\n      (log/error \"::form/layout must be a vector of vectors!\")))\n  (try\n    (into []\n      (map-indexed\n        (fn [idx row]\n          (div {:key idx :className (n-fields-string (count row))}\n            (mapv (fn [col]\n                    (enc/if-let [_    k->attribute\n                                 attr (k->attribute col)]\n                      (render-attribute env attr options)\n                      (if (some-> options ::control/controls (get col))\n                        (control/render-control (::form/form-instance env) col)\n                        (log/error \"Missing attribute (or lookup) for\" col))))\n              row)))\n        layout))\n    (catch #?(:clj Exception :cljs :default) _)))\n\n(defn render-layout [env {::form/keys [attributes layout] :as options}]\n  (let [k->attribute (attribute-map attributes)]\n    (render-layout* env options k->attribute layout)))\n\n(defsc TabbedLayout [this env {::form/keys [attributes tabbed-layout] :as options}]\n  {:initLocalState (fn [this]\n                     (try\n                       {:current-tab 0\n                        :tab-details (memoize\n                                       (fn [attributes tabbed-layout]\n                                         (let [k->attr           (attribute-map attributes)\n                                               tab-labels        (filterv string? tabbed-layout)\n                                               tab-label->layout (into {}\n                                                                   (map vec)\n                                                                   (partition 2 (mapv first (partition-by string? tabbed-layout))))]\n                                           {:k->attr           k->attr\n                                            :tab-labels        tab-labels\n                                            :tab-label->layout tab-label->layout})))}\n                       (catch #?(:clj Exception :cljs :default) _\n                         (log/error \"Cannot build tabs for tabbed layout. Check your tabbed-layout options for\" (comp/component-name this)))))}\n  (let [{:keys [tab-details current-tab]} (comp/get-state this)\n        {:keys [k->attr tab-labels tab-label->layout]} (tab-details attributes tabbed-layout)\n        active-layout (some->> current-tab\n                        (get tab-labels)\n                        (get tab-label->layout))]\n    (div {:key (str current-tab)}\n      (div :.ui.pointing.menu {}\n        (map-indexed\n          (fn [idx title]\n            (dom/a :.item\n              {:key     (str idx)\n               :onClick #(comp/set-state! this {:current-tab idx})\n               :classes [(when (= current-tab idx) \"active\")]}\n              title)) tab-labels))\n      (div :.ui.segment\n        (render-layout* env options k->attr active-layout)))))\n\n(def ui-tabbed-layout (comp/computed-factory TabbedLayout))\n\n(declare standard-form-layout-renderer)\n\n(defn standard-abandon-modal [{::form/keys [form-instance] :as env} open?]\n  (ui-modal {:open open?}\n    (ui-modal-content {}\n      (tr \"The form has unsaved changes. Do you wish to abandon the changes or return to editing?\"))\n    (ui-modal-actions {}\n      (dom/button :.ui.button\n        {:onClick (fn [] (form/clear-route-denied! form-instance))}\n        (tr \"Return to Editing\"))\n      (dom/button :.ui.button\n        {:onClick (fn [] (form/continue-abandoned-route! form-instance))}\n        (tr \"Abandon Changes\")))))\n\n(defsc StandardFormContainer [this {::form/keys [props computed-props form-instance master-form] :as env}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [{::form/keys [can-delete?]} computed-props\n        nested?         (not= master-form form-instance)\n        read-only-form? (or\n                          (?! (comp/component-options form-instance ::form/read-only?) form-instance)\n                          (?! (comp/component-options master-form ::form/read-only?) master-form))\n        {:ui/keys    [new?]\n         ::form/keys [errors]} props\n        invalid?        (if read-only-form? false (form/invalid? env))\n        errors?         (or invalid? (seq errors))\n        render-fields   (or (form/form-layout-renderer env) standard-form-layout-renderer)]\n    (when #?(:cljs goog.DEBUG :clj true)\n      (let [valid? (if read-only-form? true (form/valid? env))\n            dirty? (if read-only-form? false (or new? (fs/dirty? props)))]\n        (log/debug \"Form \" (comp/component-name form-instance) \" valid? \" valid?)\n        (log/debug \"Form \" (comp/component-name form-instance) \" dirty? \" dirty?)))\n    (if nested?\n      (div {:className (or (?! (comp/component-options form-instance ::ref-element-class) env) \"ui segment\")}\n        (div :.ui.form {:classes [(when errors? \"error\")]\n                        :key     (str (comp/get-ident form-instance))}\n          (when can-delete?\n            (button :.ui.icon.primary.right.floated.button {:disabled (not can-delete?)\n                                                            :onClick  (fn [] (form/delete-child! env))}\n              (i :.times.icon)))\n          (render-fields env)))\n      (let [{::form/keys [title action-buttons show-header?]} (comp/component-options form-instance)\n            {:ui/keys [route-denied?]} (comp/props form-instance)\n            title          (?! title form-instance props)\n            action-buttons (if action-buttons action-buttons form/standard-action-buttons)\n            show-header?   (cond\n                             (some? show-header?) (?! show-header? master-form)\n                             (some? (fo/show-header? computed-props)) (?! (fo/show-header? computed-props) master-form)\n                             :else true)\n            abandon-modal  (form/render-fn env :async-abandon-modal)]\n        (comp/fragment\n          (when (fn? abandon-modal)\n            (abandon-modal env route-denied?))\n          (div {:key       (str (comp/get-ident form-instance))\n                :className (or\n                             (?! (suo/get-rendering-options form-instance suo/layout-class) env)\n                             (?! (comp/component-options form-instance suo/layout-class) env)\n                             (?! (comp/component-options form-instance ::top-level-class) env)\n                             \"ui container\")}\n            (when show-header?\n              (div {:className (or\n                                 (?! (suo/get-rendering-options form-instance suo/controls-class) env)\n                                 (?! (comp/component-options form-instance ::controls-class) env)\n                                 \"ui top attached segment\")}\n                (div {:style {:display        \"flex\"\n                              :justifyContent \"space-between\"\n                              :flexWrap       \"wrap\"}}\n                  (dom/h3 :.ui.header {:style {:wordWrap \"break-word\" :maxWidth \"100%\"}}\n                    title)\n                  (div :.ui.buttons {:style {:textAlign \"right\" :display \"inline\" :flexGrow \"1\"}}\n                    (keep #(control/render-control master-form %) action-buttons)))))\n            (div {:classes [(or (?! (comp/component-options form-instance ::form-class) env) \"ui attached form\")\n                            (when errors? \"error\")]}\n              (when invalid?\n                (div :.ui.red.message (tr \"The form has errors and cannot be saved.\")))\n              (when (seq errors)\n                (div :.ui.red.message\n                  (div :.content\n                    (dom/div :.ui.list\n                      (map-indexed\n                        (fn [idx {:keys [message]}]\n                          (dom/div :.item {:key (str idx)}\n                            (dom/i :.triangle.exclamation.icon)\n                            (div :.content (str message))))\n                        errors))\n                    (when-not new?\n                      (dom/a {:onClick (fn []\n                                         (form/undo-via-load! env))} (tr \"Reload from server\"))))))\n              (div :.ui.attached.segment\n                (render-fields env)))))))))\n\n(def standard-form-container (comp/factory StandardFormContainer))\n\n(defn standard-form-layout-renderer [{::form/keys [form-instance] :as env}]\n  (let [{::form/keys [attributes layout tabbed-layout debug?] :as options} (comp/component-options form-instance)\n        layout (cond\n                 (vector? layout) (render-layout env options)\n                 (vector? tabbed-layout) (ui-tabbed-layout env options)\n                 :else (mapv (fn [attr] (render-attribute env attr options)) attributes))]\n    (if (and #?(:clj false :cljs goog.DEBUG) debug?)\n      (debug/top-bottom-debugger form-instance (comp/props form-instance)\n        (constantly layout))\n      layout)))\n\n(defn- file-icon-renderer* [{::form/keys [form-instance] :as env}]\n  (let [{::form/keys [attributes] :as options} (comp/component-options form-instance)\n        attribute (first (filter ::blob/store attributes))\n        sha-key   (::attr/qualified-key attribute)\n        file-key  (blob/filename-key sha-key)\n        url-key   (blob/url-key sha-key)\n        props     (comp/props form-instance)\n        filename  (get props file-key \"File\")\n        dirty?    (fs/dirty? props sha-key)\n        failed?   (blob/failed-upload? props sha-key)\n        invalid?  (form/invalid-attribute-value? env attribute)\n        pct       (blob/upload-percentage props sha-key)\n        sha       (get props sha-key)\n        url       (get props url-key)]\n    (if (blob/uploading? props sha-key)\n      (dom/span :.item {:key (str sha)}\n        (dom/div :.ui.tiny.image\n          (dom/i :.huge.file.icon)\n          (dom/div :.ui.active.red.loader {:style {:marginLeft \"-10px\"}})\n          (dom/div :.ui.bottom.attached.blue.progress {:data-percent pct}\n            (div :.bar {:style {:transitionDuration \"300ms\"\n                                :width              pct}}\n              (div :.progress \"\"))))\n        (div :.middle.aligned.content\n          filename)\n        (dom/button :.ui.red.icon.button {:onClick (fn []\n                                                     (app/abort! form-instance sha)\n                                                     (form/delete-child! env))}\n          (dom/i :.times.icon)))\n      ((if dirty? dom/span dom/a) :.item\n       {:target  \"_blank\"\n        :key     (str sha)\n        :href    (str url \"?filename=\" filename)\n        :onClick (fn [evt]\n                   #?(:cljs (when-not (or (not (blob/blob-downloadable? props sha-key))\n                                        (js/confirm (tr \"View/download?\")))\n                              (evt/stop-propagation! evt)\n                              (evt/prevent-default! evt))))}\n       (dom/div :.ui.tiny.image\n         (if failed?\n           (dom/i :.huge.skull.crossbones.icon)\n           (dom/i :.huge.file.icon)))\n       (div :.middle.aligned.content\n         (str filename (cond failed? (str \" (\" (tr \"Upload failed. Delete and try again.\") \")\")\n                             dirty? (str \" (\" (tr \"unsaved\") \")\"))))\n       (dom/button :.ui.red.icon.button {:onClick (fn [evt]\n                                                    (evt/stop-propagation! evt)\n                                                    (evt/prevent-default! evt)\n                                                    (when #?(:clj true :cljs (js/confirm (tr \"Permanently Delete File?\")))\n                                                      (form/delete-child! env)))}\n         (dom/i :.times.icon))))))\n\n(defn file-icon-renderer [env] (file-icon-renderer* env))\n"]}